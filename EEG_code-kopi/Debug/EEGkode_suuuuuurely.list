
EEGkode_suuuuuurely.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044a0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004628  08004628  00005628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004660  08004660  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004660  08004660  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004660  08004660  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004660  08004660  00005660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004664  08004664  00005664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004668  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000188  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000194  20000194  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000108b2  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022d2  00000000  00000000  000168ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  00018bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b3b  00000000  00000000  00019a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b79c  00000000  00000000  0001a53b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011b23  00000000  00000000  00035cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a859f  00000000  00000000  000477fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000efd99  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c10  00000000  00000000  000efddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  000f39ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004610 	.word	0x08004610

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004610 	.word	0x08004610

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fb28 	bl	8000820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80c 	bl	80001ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f98e 	bl	80004f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80001d8:	f000 f96e 	bl	80004b8 <MX_DMA_Init>
  MX_ADC1_Init();
 80001dc:	f000 f860 	bl	80002a0 <MX_ADC1_Init>
  MX_TIM2_Init();
 80001e0:	f000 f8ec 	bl	80003bc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80001e4:	f000 f938 	bl	8000458 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e8:	bf00      	nop
 80001ea:	e7fd      	b.n	80001e8 <main+0x20>

080001ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b096      	sub	sp, #88	@ 0x58
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80001f6:	2228      	movs	r2, #40	@ 0x28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f004 f9db 	bl	80045b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	f107 031c 	add.w	r3, r7, #28
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
 8000208:	605a      	str	r2, [r3, #4]
 800020a:	609a      	str	r2, [r3, #8]
 800020c:	60da      	str	r2, [r3, #12]
 800020e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
 800021c:	611a      	str	r2, [r3, #16]
 800021e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000220:	2302      	movs	r3, #2
 8000222:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000224:	2301      	movs	r3, #1
 8000226:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000228:	2310      	movs	r3, #16
 800022a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022c:	2302      	movs	r3, #2
 800022e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000230:	2300      	movs	r3, #0
 8000232:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000234:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000238:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800023e:	4618      	mov	r0, r3
 8000240:	f001 fcda 	bl	8001bf8 <HAL_RCC_OscConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800024a:	f000 f96b 	bl	8000524 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024e:	230f      	movs	r3, #15
 8000250:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000252:	2300      	movs	r3, #0
 8000254:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000262:	f107 031c 	add.w	r3, r7, #28
 8000266:	2100      	movs	r1, #0
 8000268:	4618      	mov	r0, r3
 800026a:	f002 fcd3 	bl	8002c14 <HAL_RCC_ClockConfig>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000274:	f000 f956 	bl	8000524 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 8000278:	2381      	movs	r3, #129	@ 0x81
 800027a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800027c:	2300      	movs	r3, #0
 800027e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000280:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000284:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4618      	mov	r0, r3
 800028a:	f002 fed5 	bl	8003038 <HAL_RCCEx_PeriphCLKConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000294:	f000 f946 	bl	8000524 <Error_Handler>
  }
}
 8000298:	bf00      	nop
 800029a:	3758      	adds	r7, #88	@ 0x58
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08a      	sub	sp, #40	@ 0x28
 80002a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002a6:	f107 031c 	add.w	r3, r7, #28
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
 80002c0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002c2:	4b3d      	ldr	r3, [pc, #244]	@ (80003b8 <MX_ADC1_Init+0x118>)
 80002c4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80002c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002ca:	4b3b      	ldr	r3, [pc, #236]	@ (80003b8 <MX_ADC1_Init+0x118>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002d0:	4b39      	ldr	r3, [pc, #228]	@ (80003b8 <MX_ADC1_Init+0x118>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002d6:	4b38      	ldr	r3, [pc, #224]	@ (80003b8 <MX_ADC1_Init+0x118>)
 80002d8:	2201      	movs	r2, #1
 80002da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002dc:	4b36      	ldr	r3, [pc, #216]	@ (80003b8 <MX_ADC1_Init+0x118>)
 80002de:	2200      	movs	r2, #0
 80002e0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002e2:	4b35      	ldr	r3, [pc, #212]	@ (80003b8 <MX_ADC1_Init+0x118>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80002ea:	4b33      	ldr	r3, [pc, #204]	@ (80003b8 <MX_ADC1_Init+0x118>)
 80002ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80002f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80002f2:	4b31      	ldr	r3, [pc, #196]	@ (80003b8 <MX_ADC1_Init+0x118>)
 80002f4:	f44f 7230 	mov.w	r2, #704	@ 0x2c0
 80002f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002fa:	4b2f      	ldr	r3, [pc, #188]	@ (80003b8 <MX_ADC1_Init+0x118>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000300:	4b2d      	ldr	r3, [pc, #180]	@ (80003b8 <MX_ADC1_Init+0x118>)
 8000302:	2203      	movs	r2, #3
 8000304:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000306:	4b2c      	ldr	r3, [pc, #176]	@ (80003b8 <MX_ADC1_Init+0x118>)
 8000308:	2201      	movs	r2, #1
 800030a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800030e:	4b2a      	ldr	r3, [pc, #168]	@ (80003b8 <MX_ADC1_Init+0x118>)
 8000310:	2204      	movs	r2, #4
 8000312:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000314:	4b28      	ldr	r3, [pc, #160]	@ (80003b8 <MX_ADC1_Init+0x118>)
 8000316:	2200      	movs	r2, #0
 8000318:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800031a:	4b27      	ldr	r3, [pc, #156]	@ (80003b8 <MX_ADC1_Init+0x118>)
 800031c:	2200      	movs	r2, #0
 800031e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000320:	4825      	ldr	r0, [pc, #148]	@ (80003b8 <MX_ADC1_Init+0x118>)
 8000322:	f000 fae3 	bl	80008ec <HAL_ADC_Init>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800032c:	f000 f8fa 	bl	8000524 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000330:	2300      	movs	r3, #0
 8000332:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000334:	f107 031c 	add.w	r3, r7, #28
 8000338:	4619      	mov	r1, r3
 800033a:	481f      	ldr	r0, [pc, #124]	@ (80003b8 <MX_ADC1_Init+0x118>)
 800033c:	f000 ff26 	bl	800118c <HAL_ADCEx_MultiModeConfigChannel>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000346:	f000 f8ed 	bl	8000524 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800034a:	2301      	movs	r3, #1
 800034c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800034e:	2301      	movs	r3, #1
 8000350:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000352:	2300      	movs	r3, #0
 8000354:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000356:	2305      	movs	r3, #5
 8000358:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800035a:	2300      	movs	r3, #0
 800035c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800035e:	2300      	movs	r3, #0
 8000360:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	4619      	mov	r1, r3
 8000366:	4814      	ldr	r0, [pc, #80]	@ (80003b8 <MX_ADC1_Init+0x118>)
 8000368:	f000 fc52 	bl	8000c10 <HAL_ADC_ConfigChannel>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000372:	f000 f8d7 	bl	8000524 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000376:	2302      	movs	r3, #2
 8000378:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800037a:	2302      	movs	r3, #2
 800037c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	4619      	mov	r1, r3
 8000382:	480d      	ldr	r0, [pc, #52]	@ (80003b8 <MX_ADC1_Init+0x118>)
 8000384:	f000 fc44 	bl	8000c10 <HAL_ADC_ConfigChannel>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 800038e:	f000 f8c9 	bl	8000524 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000392:	2303      	movs	r3, #3
 8000394:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000396:	2303      	movs	r3, #3
 8000398:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	4619      	mov	r1, r3
 800039e:	4806      	ldr	r0, [pc, #24]	@ (80003b8 <MX_ADC1_Init+0x118>)
 80003a0:	f000 fc36 	bl	8000c10 <HAL_ADC_ConfigChannel>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 80003aa:	f000 f8bb 	bl	8000524 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	3728      	adds	r7, #40	@ 0x28
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000028 	.word	0x20000028

080003bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b088      	sub	sp, #32
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003c2:	f107 0310 	add.w	r3, r7, #16
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003da:	4b1e      	ldr	r3, [pc, #120]	@ (8000454 <MX_TIM2_Init+0x98>)
 80003dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1125;
 80003e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000454 <MX_TIM2_Init+0x98>)
 80003e4:	f240 4265 	movw	r2, #1125	@ 0x465
 80003e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000454 <MX_TIM2_Init+0x98>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 80003f0:	4b18      	ldr	r3, [pc, #96]	@ (8000454 <MX_TIM2_Init+0x98>)
 80003f2:	22f9      	movs	r2, #249	@ 0xf9
 80003f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f6:	4b17      	ldr	r3, [pc, #92]	@ (8000454 <MX_TIM2_Init+0x98>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003fc:	4b15      	ldr	r3, [pc, #84]	@ (8000454 <MX_TIM2_Init+0x98>)
 80003fe:	2200      	movs	r2, #0
 8000400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000402:	4814      	ldr	r0, [pc, #80]	@ (8000454 <MX_TIM2_Init+0x98>)
 8000404:	f002 ff3c 	bl	8003280 <HAL_TIM_Base_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800040e:	f000 f889 	bl	8000524 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000412:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000416:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000418:	f107 0310 	add.w	r3, r7, #16
 800041c:	4619      	mov	r1, r3
 800041e:	480d      	ldr	r0, [pc, #52]	@ (8000454 <MX_TIM2_Init+0x98>)
 8000420:	f002 ff85 	bl	800332e <HAL_TIM_ConfigClockSource>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800042a:	f000 f87b 	bl	8000524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800042e:	2320      	movs	r3, #32
 8000430:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000432:	2300      	movs	r3, #0
 8000434:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	4619      	mov	r1, r3
 800043a:	4806      	ldr	r0, [pc, #24]	@ (8000454 <MX_TIM2_Init+0x98>)
 800043c:	f003 f95e 	bl	80036fc <HAL_TIMEx_MasterConfigSynchronization>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000446:	f000 f86d 	bl	8000524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800044a:	bf00      	nop
 800044c:	3720      	adds	r7, #32
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	200000bc 	.word	0x200000bc

08000458 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800045c:	4b14      	ldr	r3, [pc, #80]	@ (80004b0 <MX_USART1_UART_Init+0x58>)
 800045e:	4a15      	ldr	r2, [pc, #84]	@ (80004b4 <MX_USART1_UART_Init+0x5c>)
 8000460:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000462:	4b13      	ldr	r3, [pc, #76]	@ (80004b0 <MX_USART1_UART_Init+0x58>)
 8000464:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8000468:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800046a:	4b11      	ldr	r3, [pc, #68]	@ (80004b0 <MX_USART1_UART_Init+0x58>)
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000470:	4b0f      	ldr	r3, [pc, #60]	@ (80004b0 <MX_USART1_UART_Init+0x58>)
 8000472:	2200      	movs	r2, #0
 8000474:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000476:	4b0e      	ldr	r3, [pc, #56]	@ (80004b0 <MX_USART1_UART_Init+0x58>)
 8000478:	2200      	movs	r2, #0
 800047a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800047c:	4b0c      	ldr	r3, [pc, #48]	@ (80004b0 <MX_USART1_UART_Init+0x58>)
 800047e:	220c      	movs	r2, #12
 8000480:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000482:	4b0b      	ldr	r3, [pc, #44]	@ (80004b0 <MX_USART1_UART_Init+0x58>)
 8000484:	2200      	movs	r2, #0
 8000486:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000488:	4b09      	ldr	r3, [pc, #36]	@ (80004b0 <MX_USART1_UART_Init+0x58>)
 800048a:	2200      	movs	r2, #0
 800048c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800048e:	4b08      	ldr	r3, [pc, #32]	@ (80004b0 <MX_USART1_UART_Init+0x58>)
 8000490:	2200      	movs	r2, #0
 8000492:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000494:	4b06      	ldr	r3, [pc, #24]	@ (80004b0 <MX_USART1_UART_Init+0x58>)
 8000496:	2200      	movs	r2, #0
 8000498:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800049a:	4805      	ldr	r0, [pc, #20]	@ (80004b0 <MX_USART1_UART_Init+0x58>)
 800049c:	f003 f99c 	bl	80037d8 <HAL_UART_Init>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004a6:	f000 f83d 	bl	8000524 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	20000108 	.word	0x20000108
 80004b4:	40013800 	.word	0x40013800

080004b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004be:	4b0c      	ldr	r3, [pc, #48]	@ (80004f0 <MX_DMA_Init+0x38>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a0b      	ldr	r2, [pc, #44]	@ (80004f0 <MX_DMA_Init+0x38>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6153      	str	r3, [r2, #20]
 80004ca:	4b09      	ldr	r3, [pc, #36]	@ (80004f0 <MX_DMA_Init+0x38>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2100      	movs	r1, #0
 80004da:	200b      	movs	r0, #11
 80004dc:	f001 f85d 	bl	800159a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004e0:	200b      	movs	r0, #11
 80004e2:	f001 f876 	bl	80015d2 <HAL_NVIC_EnableIRQ>

}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000

080004f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b09      	ldr	r3, [pc, #36]	@ (8000520 <MX_GPIO_Init+0x2c>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a08      	ldr	r2, [pc, #32]	@ (8000520 <MX_GPIO_Init+0x2c>)
 8000500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b06      	ldr	r3, [pc, #24]	@ (8000520 <MX_GPIO_Init+0x2c>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000

08000524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000528:	b672      	cpsid	i
}
 800052a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800052c:	bf00      	nop
 800052e:	e7fd      	b.n	800052c <Error_Handler+0x8>

08000530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000536:	4b0f      	ldr	r3, [pc, #60]	@ (8000574 <HAL_MspInit+0x44>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	4a0e      	ldr	r2, [pc, #56]	@ (8000574 <HAL_MspInit+0x44>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6193      	str	r3, [r2, #24]
 8000542:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <HAL_MspInit+0x44>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800054e:	4b09      	ldr	r3, [pc, #36]	@ (8000574 <HAL_MspInit+0x44>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	4a08      	ldr	r2, [pc, #32]	@ (8000574 <HAL_MspInit+0x44>)
 8000554:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000558:	61d3      	str	r3, [r2, #28]
 800055a:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <HAL_MspInit+0x44>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000566:	bf00      	nop
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	40021000 	.word	0x40021000

08000578 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	@ 0x28
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000598:	d14d      	bne.n	8000636 <HAL_ADC_MspInit+0xbe>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800059a:	4b29      	ldr	r3, [pc, #164]	@ (8000640 <HAL_ADC_MspInit+0xc8>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	4a28      	ldr	r2, [pc, #160]	@ (8000640 <HAL_ADC_MspInit+0xc8>)
 80005a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a4:	6153      	str	r3, [r2, #20]
 80005a6:	4b26      	ldr	r3, [pc, #152]	@ (8000640 <HAL_ADC_MspInit+0xc8>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	4b23      	ldr	r3, [pc, #140]	@ (8000640 <HAL_ADC_MspInit+0xc8>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a22      	ldr	r2, [pc, #136]	@ (8000640 <HAL_ADC_MspInit+0xc8>)
 80005b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005bc:	6153      	str	r3, [r2, #20]
 80005be:	4b20      	ldr	r3, [pc, #128]	@ (8000640 <HAL_ADC_MspInit+0xc8>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80005ca:	2307      	movs	r3, #7
 80005cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ce:	2303      	movs	r3, #3
 80005d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e0:	f001 f998 	bl	8001914 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80005e4:	4b17      	ldr	r3, [pc, #92]	@ (8000644 <HAL_ADC_MspInit+0xcc>)
 80005e6:	4a18      	ldr	r2, [pc, #96]	@ (8000648 <HAL_ADC_MspInit+0xd0>)
 80005e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005ea:	4b16      	ldr	r3, [pc, #88]	@ (8000644 <HAL_ADC_MspInit+0xcc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005f0:	4b14      	ldr	r3, [pc, #80]	@ (8000644 <HAL_ADC_MspInit+0xcc>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005f6:	4b13      	ldr	r3, [pc, #76]	@ (8000644 <HAL_ADC_MspInit+0xcc>)
 80005f8:	2280      	movs	r2, #128	@ 0x80
 80005fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005fc:	4b11      	ldr	r3, [pc, #68]	@ (8000644 <HAL_ADC_MspInit+0xcc>)
 80005fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000602:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000604:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <HAL_ADC_MspInit+0xcc>)
 8000606:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800060a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800060c:	4b0d      	ldr	r3, [pc, #52]	@ (8000644 <HAL_ADC_MspInit+0xcc>)
 800060e:	2220      	movs	r2, #32
 8000610:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000612:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <HAL_ADC_MspInit+0xcc>)
 8000614:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000618:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800061a:	480a      	ldr	r0, [pc, #40]	@ (8000644 <HAL_ADC_MspInit+0xcc>)
 800061c:	f000 fff3 	bl	8001606 <HAL_DMA_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8000626:	f7ff ff7d 	bl	8000524 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a05      	ldr	r2, [pc, #20]	@ (8000644 <HAL_ADC_MspInit+0xcc>)
 800062e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000630:	4a04      	ldr	r2, [pc, #16]	@ (8000644 <HAL_ADC_MspInit+0xcc>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000636:	bf00      	nop
 8000638:	3728      	adds	r7, #40	@ 0x28
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40021000 	.word	0x40021000
 8000644:	20000078 	.word	0x20000078
 8000648:	40020008 	.word	0x40020008

0800064c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800065c:	d10b      	bne.n	8000676 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800065e:	4b09      	ldr	r3, [pc, #36]	@ (8000684 <HAL_TIM_Base_MspInit+0x38>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	4a08      	ldr	r2, [pc, #32]	@ (8000684 <HAL_TIM_Base_MspInit+0x38>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	61d3      	str	r3, [r2, #28]
 800066a:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <HAL_TIM_Base_MspInit+0x38>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000676:	bf00      	nop
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000

08000688 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	@ 0x28
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a1c      	ldr	r2, [pc, #112]	@ (8000718 <HAL_UART_MspInit+0x90>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d131      	bne.n	800070e <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006aa:	4b1c      	ldr	r3, [pc, #112]	@ (800071c <HAL_UART_MspInit+0x94>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4a1b      	ldr	r2, [pc, #108]	@ (800071c <HAL_UART_MspInit+0x94>)
 80006b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006b4:	6193      	str	r3, [r2, #24]
 80006b6:	4b19      	ldr	r3, [pc, #100]	@ (800071c <HAL_UART_MspInit+0x94>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	4b16      	ldr	r3, [pc, #88]	@ (800071c <HAL_UART_MspInit+0x94>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	4a15      	ldr	r2, [pc, #84]	@ (800071c <HAL_UART_MspInit+0x94>)
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006cc:	6153      	str	r3, [r2, #20]
 80006ce:	4b13      	ldr	r3, [pc, #76]	@ (800071c <HAL_UART_MspInit+0x94>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006da:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80006de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e0:	2302      	movs	r3, #2
 80006e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e8:	2303      	movs	r3, #3
 80006ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80006ec:	2307      	movs	r3, #7
 80006ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4619      	mov	r1, r3
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006fa:	f001 f90b 	bl	8001914 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	2025      	movs	r0, #37	@ 0x25
 8000704:	f000 ff49 	bl	800159a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000708:	2025      	movs	r0, #37	@ 0x25
 800070a:	f000 ff62 	bl	80015d2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800070e:	bf00      	nop
 8000710:	3728      	adds	r7, #40	@ 0x28
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40013800 	.word	0x40013800
 800071c:	40021000 	.word	0x40021000

08000720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <NMI_Handler+0x4>

08000728 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <HardFault_Handler+0x4>

08000730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <MemManage_Handler+0x4>

08000738 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <BusFault_Handler+0x4>

08000740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <UsageFault_Handler+0x4>

08000748 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr

08000756 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000776:	f000 f899 	bl	80008ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000784:	4802      	ldr	r0, [pc, #8]	@ (8000790 <DMA1_Channel1_IRQHandler+0x10>)
 8000786:	f001 f801 	bl	800178c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000078 	.word	0x20000078

08000794 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000798:	4802      	ldr	r0, [pc, #8]	@ (80007a4 <USART1_IRQHandler+0x10>)
 800079a:	f003 f86b 	bl	8003874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000108 	.word	0x20000108

080007a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <SystemInit+0x20>)
 80007ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007b2:	4a05      	ldr	r2, [pc, #20]	@ (80007c8 <SystemInit+0x20>)
 80007b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000804 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007d0:	f7ff ffea 	bl	80007a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d4:	480c      	ldr	r0, [pc, #48]	@ (8000808 <LoopForever+0x6>)
  ldr r1, =_edata
 80007d6:	490d      	ldr	r1, [pc, #52]	@ (800080c <LoopForever+0xa>)
  ldr r2, =_sidata
 80007d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000810 <LoopForever+0xe>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007dc:	e002      	b.n	80007e4 <LoopCopyDataInit>

080007de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e2:	3304      	adds	r3, #4

080007e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e8:	d3f9      	bcc.n	80007de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000814 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000818 <LoopForever+0x16>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f0:	e001      	b.n	80007f6 <LoopFillZerobss>

080007f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f4:	3204      	adds	r2, #4

080007f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f8:	d3fb      	bcc.n	80007f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007fa:	f003 fee5 	bl	80045c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007fe:	f7ff fce3 	bl	80001c8 <main>

08000802 <LoopForever>:

LoopForever:
    b LoopForever
 8000802:	e7fe      	b.n	8000802 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000804:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800080c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000810:	08004668 	.word	0x08004668
  ldr r2, =_sbss
 8000814:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000818:	20000194 	.word	0x20000194

0800081c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800081c:	e7fe      	b.n	800081c <ADC1_2_IRQHandler>
	...

08000820 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000824:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <HAL_Init+0x28>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a07      	ldr	r2, [pc, #28]	@ (8000848 <HAL_Init+0x28>)
 800082a:	f043 0310 	orr.w	r3, r3, #16
 800082e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000830:	2003      	movs	r0, #3
 8000832:	f000 fea7 	bl	8001584 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000836:	200f      	movs	r0, #15
 8000838:	f000 f808 	bl	800084c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800083c:	f7ff fe78 	bl	8000530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40022000 	.word	0x40022000

0800084c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000854:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <HAL_InitTick+0x54>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <HAL_InitTick+0x58>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	4619      	mov	r1, r3
 800085e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000862:	fbb3 f3f1 	udiv	r3, r3, r1
 8000866:	fbb2 f3f3 	udiv	r3, r2, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f000 febf 	bl	80015ee <HAL_SYSTICK_Config>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
 8000878:	e00e      	b.n	8000898 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b0f      	cmp	r3, #15
 800087e:	d80a      	bhi.n	8000896 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000880:	2200      	movs	r2, #0
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000888:	f000 fe87 	bl	800159a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800088c:	4a06      	ldr	r2, [pc, #24]	@ (80008a8 <HAL_InitTick+0x5c>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000892:	2300      	movs	r3, #0
 8000894:	e000      	b.n	8000898 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000896:	2301      	movs	r3, #1
}
 8000898:	4618      	mov	r0, r3
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000000 	.word	0x20000000
 80008a4:	20000008 	.word	0x20000008
 80008a8:	20000004 	.word	0x20000004

080008ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008b0:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <HAL_IncTick+0x20>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	461a      	mov	r2, r3
 80008b6:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <HAL_IncTick+0x24>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4413      	add	r3, r2
 80008bc:	4a04      	ldr	r2, [pc, #16]	@ (80008d0 <HAL_IncTick+0x24>)
 80008be:	6013      	str	r3, [r2, #0]
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	20000008 	.word	0x20000008
 80008d0:	20000190 	.word	0x20000190

080008d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80008d8:	4b03      	ldr	r3, [pc, #12]	@ (80008e8 <HAL_GetTick+0x14>)
 80008da:	681b      	ldr	r3, [r3, #0]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	20000190 	.word	0x20000190

080008ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b09a      	sub	sp, #104	@ 0x68
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80008fa:	2300      	movs	r3, #0
 80008fc:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d101      	bne.n	800090c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000908:	2301      	movs	r3, #1
 800090a:	e172      	b.n	8000bf2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	691b      	ldr	r3, [r3, #16]
 8000910:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000916:	f003 0310 	and.w	r3, r3, #16
 800091a:	2b00      	cmp	r3, #0
 800091c:	d176      	bne.n	8000a0c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	2b00      	cmp	r3, #0
 8000924:	d152      	bne.n	80009cc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2200      	movs	r2, #0
 800092a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2200      	movs	r2, #0
 8000930:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2200      	movs	r2, #0
 8000936:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2200      	movs	r2, #0
 800093c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff fe19 	bl	8000578 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000950:	2b00      	cmp	r3, #0
 8000952:	d13b      	bne.n	80009cc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f000 fcdf 	bl	8001318 <ADC_Disable>
 800095a:	4603      	mov	r3, r0
 800095c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000964:	f003 0310 	and.w	r3, r3, #16
 8000968:	2b00      	cmp	r3, #0
 800096a:	d12f      	bne.n	80009cc <HAL_ADC_Init+0xe0>
 800096c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000970:	2b00      	cmp	r3, #0
 8000972:	d12b      	bne.n	80009cc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000978:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800097c:	f023 0302 	bic.w	r3, r3, #2
 8000980:	f043 0202 	orr.w	r2, r3, #2
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	689a      	ldr	r2, [r3, #8]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000996:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	689a      	ldr	r2, [r3, #8]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80009a6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80009a8:	4b94      	ldr	r3, [pc, #592]	@ (8000bfc <HAL_ADC_Init+0x310>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a94      	ldr	r2, [pc, #592]	@ (8000c00 <HAL_ADC_Init+0x314>)
 80009ae:	fba2 2303 	umull	r2, r3, r2, r3
 80009b2:	0c9a      	lsrs	r2, r3, #18
 80009b4:	4613      	mov	r3, r2
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	4413      	add	r3, r2
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80009be:	e002      	b.n	80009c6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1f9      	bne.n	80009c0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d007      	beq.n	80009ea <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80009e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80009e8:	d110      	bne.n	8000a0c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ee:	f023 0312 	bic.w	r3, r3, #18
 80009f2:	f043 0210 	orr.w	r2, r3, #16
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fe:	f043 0201 	orr.w	r2, r3, #1
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a10:	f003 0310 	and.w	r3, r3, #16
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	f040 80df 	bne.w	8000bd8 <HAL_ADC_Init+0x2ec>
 8000a1a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f040 80da 	bne.w	8000bd8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f040 80d2 	bne.w	8000bd8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a38:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000a3c:	f043 0202 	orr.w	r2, r3, #2
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a44:	4b6f      	ldr	r3, [pc, #444]	@ (8000c04 <HAL_ADC_Init+0x318>)
 8000a46:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a50:	d102      	bne.n	8000a58 <HAL_ADC_Init+0x16c>
 8000a52:	4b6d      	ldr	r3, [pc, #436]	@ (8000c08 <HAL_ADC_Init+0x31c>)
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	e002      	b.n	8000a5e <HAL_ADC_Init+0x172>
 8000a58:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000a5c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	f003 0303 	and.w	r3, r3, #3
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d108      	bne.n	8000a7e <HAL_ADC_Init+0x192>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d101      	bne.n	8000a7e <HAL_ADC_Init+0x192>
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e000      	b.n	8000a80 <HAL_ADC_Init+0x194>
 8000a7e:	2300      	movs	r3, #0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d11c      	bne.n	8000abe <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000a84:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d010      	beq.n	8000aac <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	f003 0303 	and.w	r3, r3, #3
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d107      	bne.n	8000aa6 <HAL_ADC_Init+0x1ba>
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d101      	bne.n	8000aa6 <HAL_ADC_Init+0x1ba>
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e000      	b.n	8000aa8 <HAL_ADC_Init+0x1bc>
 8000aa6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d108      	bne.n	8000abe <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000aac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	431a      	orrs	r2, r3
 8000aba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000abc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	7e5b      	ldrb	r3, [r3, #25]
 8000ac2:	035b      	lsls	r3, r3, #13
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000ac8:	2a01      	cmp	r2, #1
 8000aca:	d002      	beq.n	8000ad2 <HAL_ADC_Init+0x1e6>
 8000acc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ad0:	e000      	b.n	8000ad4 <HAL_ADC_Init+0x1e8>
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	431a      	orrs	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	431a      	orrs	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d11b      	bne.n	8000b2a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	7e5b      	ldrb	r3, [r3, #25]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d109      	bne.n	8000b0e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000afe:	3b01      	subs	r3, #1
 8000b00:	045a      	lsls	r2, r3, #17
 8000b02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000b04:	4313      	orrs	r3, r2
 8000b06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8000b0c:	e00d      	b.n	8000b2a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000b16:	f043 0220 	orr.w	r2, r3, #32
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b22:	f043 0201 	orr.w	r2, r3, #1
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d007      	beq.n	8000b42 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	f003 030c 	and.w	r3, r3, #12
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d114      	bne.n	8000b7a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	6812      	ldr	r2, [r2, #0]
 8000b5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000b5e:	f023 0302 	bic.w	r3, r3, #2
 8000b62:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	7e1b      	ldrb	r3, [r3, #24]
 8000b68:	039a      	lsls	r2, r3, #14
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	4313      	orrs	r3, r2
 8000b74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000b76:	4313      	orrs	r3, r2
 8000b78:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	68da      	ldr	r2, [r3, #12]
 8000b80:	4b22      	ldr	r3, [pc, #136]	@ (8000c0c <HAL_ADC_Init+0x320>)
 8000b82:	4013      	ands	r3, r2
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	6812      	ldr	r2, [r2, #0]
 8000b88:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000b8a:	430b      	orrs	r3, r1
 8000b8c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d10c      	bne.n	8000bb0 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9c:	f023 010f 	bic.w	r1, r3, #15
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	69db      	ldr	r3, [r3, #28]
 8000ba4:	1e5a      	subs	r2, r3, #1
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	430a      	orrs	r2, r1
 8000bac:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bae:	e007      	b.n	8000bc0 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f022 020f 	bic.w	r2, r2, #15
 8000bbe:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bca:	f023 0303 	bic.w	r3, r3, #3
 8000bce:	f043 0201 	orr.w	r2, r3, #1
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000bd6:	e00a      	b.n	8000bee <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bdc:	f023 0312 	bic.w	r3, r3, #18
 8000be0:	f043 0210 	orr.w	r2, r3, #16
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000be8:	2301      	movs	r3, #1
 8000bea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000bee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3768      	adds	r7, #104	@ 0x68
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	431bde83 	.word	0x431bde83
 8000c04:	50000300 	.word	0x50000300
 8000c08:	50000100 	.word	0x50000100
 8000c0c:	fff0c007 	.word	0xfff0c007

08000c10 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b09b      	sub	sp, #108	@ 0x6c
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d101      	bne.n	8000c32 <HAL_ADC_ConfigChannel+0x22>
 8000c2e:	2302      	movs	r3, #2
 8000c30:	e2a1      	b.n	8001176 <HAL_ADC_ConfigChannel+0x566>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2201      	movs	r2, #1
 8000c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	f003 0304 	and.w	r3, r3, #4
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	f040 8285 	bne.w	8001154 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	d81c      	bhi.n	8000c8c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	4413      	add	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	461a      	mov	r2, r3
 8000c66:	231f      	movs	r3, #31
 8000c68:	4093      	lsls	r3, r2
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	4019      	ands	r1, r3
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	6818      	ldr	r0, [r3, #0]
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685a      	ldr	r2, [r3, #4]
 8000c76:	4613      	mov	r3, r2
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	4413      	add	r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	fa00 f203 	lsl.w	r2, r0, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	430a      	orrs	r2, r1
 8000c88:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c8a:	e063      	b.n	8000d54 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2b09      	cmp	r3, #9
 8000c92:	d81e      	bhi.n	8000cd2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	4413      	add	r3, r2
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	3b1e      	subs	r3, #30
 8000ca8:	221f      	movs	r2, #31
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	4019      	ands	r1, r3
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	6818      	ldr	r0, [r3, #0]
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685a      	ldr	r2, [r3, #4]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	4413      	add	r3, r2
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	3b1e      	subs	r3, #30
 8000cc4:	fa00 f203 	lsl.w	r2, r0, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cd0:	e040      	b.n	8000d54 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2b0e      	cmp	r3, #14
 8000cd8:	d81e      	bhi.n	8000d18 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	4413      	add	r3, r2
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	3b3c      	subs	r3, #60	@ 0x3c
 8000cee:	221f      	movs	r2, #31
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	4019      	ands	r1, r3
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	6818      	ldr	r0, [r3, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685a      	ldr	r2, [r3, #4]
 8000d00:	4613      	mov	r3, r2
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	4413      	add	r3, r2
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	3b3c      	subs	r3, #60	@ 0x3c
 8000d0a:	fa00 f203 	lsl.w	r2, r0, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	430a      	orrs	r2, r1
 8000d14:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d16:	e01d      	b.n	8000d54 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	4613      	mov	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	3b5a      	subs	r3, #90	@ 0x5a
 8000d2c:	221f      	movs	r2, #31
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	4019      	ands	r1, r3
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	6818      	ldr	r0, [r3, #0]
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685a      	ldr	r2, [r3, #4]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	4413      	add	r3, r2
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	3b5a      	subs	r3, #90	@ 0x5a
 8000d48:	fa00 f203 	lsl.w	r2, r0, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	430a      	orrs	r2, r1
 8000d52:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f003 030c 	and.w	r3, r3, #12
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 80e5 	bne.w	8000f2e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b09      	cmp	r3, #9
 8000d6a:	d91c      	bls.n	8000da6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	6999      	ldr	r1, [r3, #24]
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	4613      	mov	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	3b1e      	subs	r3, #30
 8000d7e:	2207      	movs	r2, #7
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	4019      	ands	r1, r3
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	6898      	ldr	r0, [r3, #8]
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4613      	mov	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	4413      	add	r3, r2
 8000d96:	3b1e      	subs	r3, #30
 8000d98:	fa00 f203 	lsl.w	r2, r0, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	430a      	orrs	r2, r1
 8000da2:	619a      	str	r2, [r3, #24]
 8000da4:	e019      	b.n	8000dda <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	6959      	ldr	r1, [r3, #20]
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4613      	mov	r3, r2
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	4413      	add	r3, r2
 8000db6:	2207      	movs	r2, #7
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	4019      	ands	r1, r3
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	6898      	ldr	r0, [r3, #8]
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	4413      	add	r3, r2
 8000dce:	fa00 f203 	lsl.w	r2, r0, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	695a      	ldr	r2, [r3, #20]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	08db      	lsrs	r3, r3, #3
 8000de6:	f003 0303 	and.w	r3, r3, #3
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	2b03      	cmp	r3, #3
 8000dfa:	d84f      	bhi.n	8000e9c <HAL_ADC_ConfigChannel+0x28c>
 8000dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8000e04 <HAL_ADC_ConfigChannel+0x1f4>)
 8000dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e02:	bf00      	nop
 8000e04:	08000e15 	.word	0x08000e15
 8000e08:	08000e37 	.word	0x08000e37
 8000e0c:	08000e59 	.word	0x08000e59
 8000e10:	08000e7b 	.word	0x08000e7b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e1a:	4b9c      	ldr	r3, [pc, #624]	@ (800108c <HAL_ADC_ConfigChannel+0x47c>)
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	683a      	ldr	r2, [r7, #0]
 8000e20:	6812      	ldr	r2, [r2, #0]
 8000e22:	0691      	lsls	r1, r2, #26
 8000e24:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000e26:	430a      	orrs	r2, r1
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000e32:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000e34:	e07b      	b.n	8000f2e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000e3c:	4b93      	ldr	r3, [pc, #588]	@ (800108c <HAL_ADC_ConfigChannel+0x47c>)
 8000e3e:	4013      	ands	r3, r2
 8000e40:	683a      	ldr	r2, [r7, #0]
 8000e42:	6812      	ldr	r2, [r2, #0]
 8000e44:	0691      	lsls	r1, r2, #26
 8000e46:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000e54:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000e56:	e06a      	b.n	8000f2e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8000e5e:	4b8b      	ldr	r3, [pc, #556]	@ (800108c <HAL_ADC_ConfigChannel+0x47c>)
 8000e60:	4013      	ands	r3, r2
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	6812      	ldr	r2, [r2, #0]
 8000e66:	0691      	lsls	r1, r2, #26
 8000e68:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	431a      	orrs	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000e76:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000e78:	e059      	b.n	8000f2e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8000e80:	4b82      	ldr	r3, [pc, #520]	@ (800108c <HAL_ADC_ConfigChannel+0x47c>)
 8000e82:	4013      	ands	r3, r2
 8000e84:	683a      	ldr	r2, [r7, #0]
 8000e86:	6812      	ldr	r2, [r2, #0]
 8000e88:	0691      	lsls	r1, r2, #26
 8000e8a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000e98:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000e9a:	e048      	b.n	8000f2e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ea2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	069b      	lsls	r3, r3, #26
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d107      	bne.n	8000ec0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8000ebe:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000ec6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	069b      	lsls	r3, r3, #26
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d107      	bne.n	8000ee4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8000ee2:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000eea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	069b      	lsls	r3, r3, #26
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d107      	bne.n	8000f08 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8000f06:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000f0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	069b      	lsls	r3, r3, #26
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d107      	bne.n	8000f2c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8000f2a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8000f2c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d108      	bne.n	8000f4e <HAL_ADC_ConfigChannel+0x33e>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d101      	bne.n	8000f4e <HAL_ADC_ConfigChannel+0x33e>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <HAL_ADC_ConfigChannel+0x340>
 8000f4e:	2300      	movs	r3, #0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f040 810a 	bne.w	800116a <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d00f      	beq.n	8000f7e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43da      	mvns	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	400a      	ands	r2, r1
 8000f78:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8000f7c:	e049      	b.n	8001012 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	409a      	lsls	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	430a      	orrs	r2, r1
 8000f94:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b09      	cmp	r3, #9
 8000f9e:	d91c      	bls.n	8000fda <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6999      	ldr	r1, [r3, #24]
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4613      	mov	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4413      	add	r3, r2
 8000fb0:	3b1b      	subs	r3, #27
 8000fb2:	2207      	movs	r2, #7
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	4019      	ands	r1, r3
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	6898      	ldr	r0, [r3, #8]
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4413      	add	r3, r2
 8000fca:	3b1b      	subs	r3, #27
 8000fcc:	fa00 f203 	lsl.w	r2, r0, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	619a      	str	r2, [r3, #24]
 8000fd8:	e01b      	b.n	8001012 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6959      	ldr	r1, [r3, #20]
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	1c5a      	adds	r2, r3, #1
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	4413      	add	r3, r2
 8000fec:	2207      	movs	r2, #7
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	4019      	ands	r1, r3
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	6898      	ldr	r0, [r3, #8]
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	4613      	mov	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	4413      	add	r3, r2
 8001006:	fa00 f203 	lsl.w	r2, r0, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	430a      	orrs	r2, r1
 8001010:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001012:	4b1f      	ldr	r3, [pc, #124]	@ (8001090 <HAL_ADC_ConfigChannel+0x480>)
 8001014:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b10      	cmp	r3, #16
 800101c:	d105      	bne.n	800102a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800101e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001026:	2b00      	cmp	r3, #0
 8001028:	d015      	beq.n	8001056 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800102e:	2b11      	cmp	r3, #17
 8001030:	d105      	bne.n	800103e <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001032:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00b      	beq.n	8001056 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001042:	2b12      	cmp	r3, #18
 8001044:	f040 8091 	bne.w	800116a <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001048:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001050:	2b00      	cmp	r3, #0
 8001052:	f040 808a 	bne.w	800116a <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800105e:	d102      	bne.n	8001066 <HAL_ADC_ConfigChannel+0x456>
 8001060:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <HAL_ADC_ConfigChannel+0x484>)
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	e002      	b.n	800106c <HAL_ADC_ConfigChannel+0x45c>
 8001066:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800106a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	2b01      	cmp	r3, #1
 8001078:	d10e      	bne.n	8001098 <HAL_ADC_ConfigChannel+0x488>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	2b01      	cmp	r3, #1
 8001086:	d107      	bne.n	8001098 <HAL_ADC_ConfigChannel+0x488>
 8001088:	2301      	movs	r3, #1
 800108a:	e006      	b.n	800109a <HAL_ADC_ConfigChannel+0x48a>
 800108c:	83fff000 	.word	0x83fff000
 8001090:	50000300 	.word	0x50000300
 8001094:	50000100 	.word	0x50000100
 8001098:	2300      	movs	r3, #0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d150      	bne.n	8001140 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800109e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d010      	beq.n	80010c6 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d107      	bne.n	80010c0 <HAL_ADC_ConfigChannel+0x4b0>
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d101      	bne.n	80010c0 <HAL_ADC_ConfigChannel+0x4b0>
 80010bc:	2301      	movs	r3, #1
 80010be:	e000      	b.n	80010c2 <HAL_ADC_ConfigChannel+0x4b2>
 80010c0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d13c      	bne.n	8001140 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b10      	cmp	r3, #16
 80010cc:	d11d      	bne.n	800110a <HAL_ADC_ConfigChannel+0x4fa>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010d6:	d118      	bne.n	800110a <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80010d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80010e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010e2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010e4:	4b27      	ldr	r3, [pc, #156]	@ (8001184 <HAL_ADC_ConfigChannel+0x574>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a27      	ldr	r2, [pc, #156]	@ (8001188 <HAL_ADC_ConfigChannel+0x578>)
 80010ea:	fba2 2303 	umull	r2, r3, r2, r3
 80010ee:	0c9a      	lsrs	r2, r3, #18
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010fa:	e002      	b.n	8001102 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	3b01      	subs	r3, #1
 8001100:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1f9      	bne.n	80010fc <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001108:	e02e      	b.n	8001168 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b11      	cmp	r3, #17
 8001110:	d10b      	bne.n	800112a <HAL_ADC_ConfigChannel+0x51a>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800111a:	d106      	bne.n	800112a <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800111c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001124:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001126:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001128:	e01e      	b.n	8001168 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b12      	cmp	r3, #18
 8001130:	d11a      	bne.n	8001168 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001132:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800113a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800113c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800113e:	e013      	b.n	8001168 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001144:	f043 0220 	orr.w	r2, r3, #32
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001152:	e00a      	b.n	800116a <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001158:	f043 0220 	orr.w	r2, r3, #32
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001166:	e000      	b.n	800116a <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001168:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001172:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001176:	4618      	mov	r0, r3
 8001178:	376c      	adds	r7, #108	@ 0x6c
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000000 	.word	0x20000000
 8001188:	431bde83 	.word	0x431bde83

0800118c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800118c:	b480      	push	{r7}
 800118e:	b099      	sub	sp, #100	@ 0x64
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011a4:	d102      	bne.n	80011ac <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80011a6:	4b5a      	ldr	r3, [pc, #360]	@ (8001310 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	e002      	b.n	80011b2 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80011ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80011b0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d101      	bne.n	80011bc <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e0a2      	b.n	8001302 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d101      	bne.n	80011ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80011c6:	2302      	movs	r3, #2
 80011c8:	e09b      	b.n	8001302 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2201      	movs	r2, #1
 80011ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d17f      	bne.n	80012e0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d179      	bne.n	80012e0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011ec:	4b49      	ldr	r3, [pc, #292]	@ (8001314 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80011ee:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d040      	beq.n	800127a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80011f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	6859      	ldr	r1, [r3, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800120a:	035b      	lsls	r3, r3, #13
 800120c:	430b      	orrs	r3, r1
 800120e:	431a      	orrs	r2, r3
 8001210:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001212:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	2b01      	cmp	r3, #1
 8001220:	d108      	bne.n	8001234 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b01      	cmp	r3, #1
 800122e:	d101      	bne.n	8001234 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001234:	2300      	movs	r3, #0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d15c      	bne.n	80012f4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	2b01      	cmp	r3, #1
 8001244:	d107      	bne.n	8001256 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b01      	cmp	r3, #1
 8001250:	d101      	bne.n	8001256 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001256:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001258:	2b00      	cmp	r3, #0
 800125a:	d14b      	bne.n	80012f4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800125c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001264:	f023 030f 	bic.w	r3, r3, #15
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	6811      	ldr	r1, [r2, #0]
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	6892      	ldr	r2, [r2, #8]
 8001270:	430a      	orrs	r2, r1
 8001272:	431a      	orrs	r2, r3
 8001274:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001276:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001278:	e03c      	b.n	80012f4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800127a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001282:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001284:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b01      	cmp	r3, #1
 8001292:	d108      	bne.n	80012a6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d101      	bne.n	80012a6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80012a6:	2300      	movs	r3, #0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d123      	bne.n	80012f4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d107      	bne.n	80012c8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d101      	bne.n	80012c8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80012c4:	2301      	movs	r3, #1
 80012c6:	e000      	b.n	80012ca <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80012c8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d112      	bne.n	80012f4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80012ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80012d6:	f023 030f 	bic.w	r3, r3, #15
 80012da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80012dc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80012de:	e009      	b.n	80012f4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e4:	f043 0220 	orr.w	r2, r3, #32
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80012f2:	e000      	b.n	80012f6 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80012f4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80012fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001302:	4618      	mov	r0, r3
 8001304:	3764      	adds	r7, #100	@ 0x64
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	50000100 	.word	0x50000100
 8001314:	50000300 	.word	0x50000300

08001318 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	2b01      	cmp	r3, #1
 8001330:	d108      	bne.n	8001344 <ADC_Disable+0x2c>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b01      	cmp	r3, #1
 800133e:	d101      	bne.n	8001344 <ADC_Disable+0x2c>
 8001340:	2301      	movs	r3, #1
 8001342:	e000      	b.n	8001346 <ADC_Disable+0x2e>
 8001344:	2300      	movs	r3, #0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d047      	beq.n	80013da <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 030d 	and.w	r3, r3, #13
 8001354:	2b01      	cmp	r3, #1
 8001356:	d10f      	bne.n	8001378 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f042 0202 	orr.w	r2, r2, #2
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2203      	movs	r2, #3
 800136e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001370:	f7ff fab0 	bl	80008d4 <HAL_GetTick>
 8001374:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001376:	e029      	b.n	80013cc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137c:	f043 0210 	orr.w	r2, r3, #16
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001388:	f043 0201 	orr.w	r2, r3, #1
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e023      	b.n	80013dc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001394:	f7ff fa9e 	bl	80008d4 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d914      	bls.n	80013cc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d10d      	bne.n	80013cc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b4:	f043 0210 	orr.w	r2, r3, #16
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c0:	f043 0201 	orr.w	r2, r3, #1
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e007      	b.n	80013dc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d0dc      	beq.n	8001394 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001400:	4013      	ands	r3, r2
 8001402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800140c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001410:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001416:	4a04      	ldr	r2, [pc, #16]	@ (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	60d3      	str	r3, [r2, #12]
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001430:	4b04      	ldr	r3, [pc, #16]	@ (8001444 <__NVIC_GetPriorityGrouping+0x18>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	0a1b      	lsrs	r3, r3, #8
 8001436:	f003 0307 	and.w	r3, r3, #7
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	2b00      	cmp	r3, #0
 8001458:	db0b      	blt.n	8001472 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	f003 021f 	and.w	r2, r3, #31
 8001460:	4907      	ldr	r1, [pc, #28]	@ (8001480 <__NVIC_EnableIRQ+0x38>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	095b      	lsrs	r3, r3, #5
 8001468:	2001      	movs	r0, #1
 800146a:	fa00 f202 	lsl.w	r2, r0, r2
 800146e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000e100 	.word	0xe000e100

08001484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	db0a      	blt.n	80014ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	490c      	ldr	r1, [pc, #48]	@ (80014d0 <__NVIC_SetPriority+0x4c>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	0112      	lsls	r2, r2, #4
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	440b      	add	r3, r1
 80014a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ac:	e00a      	b.n	80014c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4908      	ldr	r1, [pc, #32]	@ (80014d4 <__NVIC_SetPriority+0x50>)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	3b04      	subs	r3, #4
 80014bc:	0112      	lsls	r2, r2, #4
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	440b      	add	r3, r1
 80014c2:	761a      	strb	r2, [r3, #24]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000e100 	.word	0xe000e100
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b089      	sub	sp, #36	@ 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f1c3 0307 	rsb	r3, r3, #7
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	bf28      	it	cs
 80014f6:	2304      	movcs	r3, #4
 80014f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3304      	adds	r3, #4
 80014fe:	2b06      	cmp	r3, #6
 8001500:	d902      	bls.n	8001508 <NVIC_EncodePriority+0x30>
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3b03      	subs	r3, #3
 8001506:	e000      	b.n	800150a <NVIC_EncodePriority+0x32>
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43da      	mvns	r2, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	401a      	ands	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001520:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	43d9      	mvns	r1, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	4313      	orrs	r3, r2
         );
}
 8001532:	4618      	mov	r0, r3
 8001534:	3724      	adds	r7, #36	@ 0x24
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001550:	d301      	bcc.n	8001556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001552:	2301      	movs	r3, #1
 8001554:	e00f      	b.n	8001576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001556:	4a0a      	ldr	r2, [pc, #40]	@ (8001580 <SysTick_Config+0x40>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155e:	210f      	movs	r1, #15
 8001560:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001564:	f7ff ff8e 	bl	8001484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001568:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <SysTick_Config+0x40>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156e:	4b04      	ldr	r3, [pc, #16]	@ (8001580 <SysTick_Config+0x40>)
 8001570:	2207      	movs	r2, #7
 8001572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	e000e010 	.word	0xe000e010

08001584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ff29 	bl	80013e4 <__NVIC_SetPriorityGrouping>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b086      	sub	sp, #24
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ac:	f7ff ff3e 	bl	800142c <__NVIC_GetPriorityGrouping>
 80015b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	6978      	ldr	r0, [r7, #20]
 80015b8:	f7ff ff8e 	bl	80014d8 <NVIC_EncodePriority>
 80015bc:	4602      	mov	r2, r0
 80015be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff5d 	bl	8001484 <__NVIC_SetPriority>
}
 80015ca:	bf00      	nop
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff31 	bl	8001448 <__NVIC_EnableIRQ>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ffa2 	bl	8001540 <SysTick_Config>
 80015fc:	4603      	mov	r3, r0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e037      	b.n	800168c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2202      	movs	r2, #2
 8001620:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001632:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001636:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001640:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800164c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001658:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	4313      	orrs	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f930 	bl	80018d4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e02e      	b.n	8001704 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d008      	beq.n	80016c2 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2204      	movs	r2, #4
 80016b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e020      	b.n	8001704 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 020e 	bic.w	r2, r2, #14
 80016d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 0201 	bic.w	r2, r2, #1
 80016e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016ea:	2101      	movs	r1, #1
 80016ec:	fa01 f202 	lsl.w	r2, r1, r2
 80016f0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001722:	2b02      	cmp	r3, #2
 8001724:	d005      	beq.n	8001732 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2204      	movs	r2, #4
 800172a:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	73fb      	strb	r3, [r7, #15]
 8001730:	e027      	b.n	8001782 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 020e 	bic.w	r2, r2, #14
 8001740:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0201 	bic.w	r2, r2, #1
 8001750:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800175a:	2101      	movs	r1, #1
 800175c:	fa01 f202 	lsl.w	r2, r1, r2
 8001760:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	4798      	blx	r3
    }
  }
  return status;
 8001782:	7bfb      	ldrb	r3, [r7, #15]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a8:	2204      	movs	r2, #4
 80017aa:	409a      	lsls	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4013      	ands	r3, r2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d024      	beq.n	80017fe <HAL_DMA_IRQHandler+0x72>
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d01f      	beq.n	80017fe <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0320 	and.w	r3, r3, #32
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d107      	bne.n	80017dc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0204 	bic.w	r2, r2, #4
 80017da:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017e4:	2104      	movs	r1, #4
 80017e6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ea:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d06a      	beq.n	80018ca <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80017fc:	e065      	b.n	80018ca <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	2202      	movs	r2, #2
 8001804:	409a      	lsls	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4013      	ands	r3, r2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d02c      	beq.n	8001868 <HAL_DMA_IRQHandler+0xdc>
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d027      	beq.n	8001868 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0320 	and.w	r3, r3, #32
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10b      	bne.n	800183e <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 020a 	bic.w	r2, r2, #10
 8001834:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001846:	2102      	movs	r1, #2
 8001848:	fa01 f202 	lsl.w	r2, r1, r2
 800184c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185a:	2b00      	cmp	r3, #0
 800185c:	d035      	beq.n	80018ca <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001866:	e030      	b.n	80018ca <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186c:	2208      	movs	r2, #8
 800186e:	409a      	lsls	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4013      	ands	r3, r2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d028      	beq.n	80018ca <HAL_DMA_IRQHandler+0x13e>
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d023      	beq.n	80018ca <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 020e 	bic.w	r2, r2, #14
 8001890:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800189a:	2101      	movs	r1, #1
 800189c:	fa01 f202 	lsl.w	r2, r1, r2
 80018a0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d004      	beq.n	80018ca <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	4798      	blx	r3
    }
  }
}
 80018c8:	e7ff      	b.n	80018ca <HAL_DMA_IRQHandler+0x13e>
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <DMA_CalcBaseAndBitshift+0x34>)
 80018e4:	4413      	add	r3, r2
 80018e6:	4a09      	ldr	r2, [pc, #36]	@ (800190c <DMA_CalcBaseAndBitshift+0x38>)
 80018e8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ec:	091b      	lsrs	r3, r3, #4
 80018ee:	009a      	lsls	r2, r3, #2
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a06      	ldr	r2, [pc, #24]	@ (8001910 <DMA_CalcBaseAndBitshift+0x3c>)
 80018f8:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	bffdfff8 	.word	0xbffdfff8
 800190c:	cccccccd 	.word	0xcccccccd
 8001910:	40020000 	.word	0x40020000

08001914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001914:	b480      	push	{r7}
 8001916:	b087      	sub	sp, #28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001922:	e14e      	b.n	8001bc2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	2101      	movs	r1, #1
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	fa01 f303 	lsl.w	r3, r1, r3
 8001930:	4013      	ands	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 8140 	beq.w	8001bbc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b01      	cmp	r3, #1
 8001946:	d005      	beq.n	8001954 <HAL_GPIO_Init+0x40>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d130      	bne.n	80019b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800198a:	2201      	movs	r2, #1
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	091b      	lsrs	r3, r3, #4
 80019a0:	f003 0201 	and.w	r2, r3, #1
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	2b03      	cmp	r3, #3
 80019c0:	d017      	beq.n	80019f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2203      	movs	r2, #3
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d123      	bne.n	8001a46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	08da      	lsrs	r2, r3, #3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3208      	adds	r2, #8
 8001a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	220f      	movs	r2, #15
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	691a      	ldr	r2, [r3, #16]
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	08da      	lsrs	r2, r3, #3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3208      	adds	r2, #8
 8001a40:	6939      	ldr	r1, [r7, #16]
 8001a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	2203      	movs	r2, #3
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0203 	and.w	r2, r3, #3
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 809a 	beq.w	8001bbc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a88:	4b55      	ldr	r3, [pc, #340]	@ (8001be0 <HAL_GPIO_Init+0x2cc>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	4a54      	ldr	r2, [pc, #336]	@ (8001be0 <HAL_GPIO_Init+0x2cc>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6193      	str	r3, [r2, #24]
 8001a94:	4b52      	ldr	r3, [pc, #328]	@ (8001be0 <HAL_GPIO_Init+0x2cc>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001aa0:	4a50      	ldr	r2, [pc, #320]	@ (8001be4 <HAL_GPIO_Init+0x2d0>)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	220f      	movs	r2, #15
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001aca:	d013      	beq.n	8001af4 <HAL_GPIO_Init+0x1e0>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a46      	ldr	r2, [pc, #280]	@ (8001be8 <HAL_GPIO_Init+0x2d4>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d00d      	beq.n	8001af0 <HAL_GPIO_Init+0x1dc>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a45      	ldr	r2, [pc, #276]	@ (8001bec <HAL_GPIO_Init+0x2d8>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d007      	beq.n	8001aec <HAL_GPIO_Init+0x1d8>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a44      	ldr	r2, [pc, #272]	@ (8001bf0 <HAL_GPIO_Init+0x2dc>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d101      	bne.n	8001ae8 <HAL_GPIO_Init+0x1d4>
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e006      	b.n	8001af6 <HAL_GPIO_Init+0x1e2>
 8001ae8:	2305      	movs	r3, #5
 8001aea:	e004      	b.n	8001af6 <HAL_GPIO_Init+0x1e2>
 8001aec:	2302      	movs	r3, #2
 8001aee:	e002      	b.n	8001af6 <HAL_GPIO_Init+0x1e2>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <HAL_GPIO_Init+0x1e2>
 8001af4:	2300      	movs	r3, #0
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	f002 0203 	and.w	r2, r2, #3
 8001afc:	0092      	lsls	r2, r2, #2
 8001afe:	4093      	lsls	r3, r2
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b06:	4937      	ldr	r1, [pc, #220]	@ (8001be4 <HAL_GPIO_Init+0x2d0>)
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b14:	4b37      	ldr	r3, [pc, #220]	@ (8001bf4 <HAL_GPIO_Init+0x2e0>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b38:	4a2e      	ldr	r2, [pc, #184]	@ (8001bf4 <HAL_GPIO_Init+0x2e0>)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf4 <HAL_GPIO_Init+0x2e0>)
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b62:	4a24      	ldr	r2, [pc, #144]	@ (8001bf4 <HAL_GPIO_Init+0x2e0>)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b68:	4b22      	ldr	r3, [pc, #136]	@ (8001bf4 <HAL_GPIO_Init+0x2e0>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b8c:	4a19      	ldr	r2, [pc, #100]	@ (8001bf4 <HAL_GPIO_Init+0x2e0>)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b92:	4b18      	ldr	r3, [pc, #96]	@ (8001bf4 <HAL_GPIO_Init+0x2e0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8001bf4 <HAL_GPIO_Init+0x2e0>)
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f47f aea9 	bne.w	8001924 <HAL_GPIO_Init+0x10>
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	bf00      	nop
 8001bd6:	371c      	adds	r7, #28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40010000 	.word	0x40010000
 8001be8:	48000400 	.word	0x48000400
 8001bec:	48000800 	.word	0x48000800
 8001bf0:	48000c00 	.word	0x48000c00
 8001bf4:	40010400 	.word	0x40010400

08001bf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c08:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d102      	bne.n	8001c1e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	f000 bff4 	b.w	8002c06 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 816d 	beq.w	8001f0e <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c34:	4bb4      	ldr	r3, [pc, #720]	@ (8001f08 <HAL_RCC_OscConfig+0x310>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d00c      	beq.n	8001c5a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c40:	4bb1      	ldr	r3, [pc, #708]	@ (8001f08 <HAL_RCC_OscConfig+0x310>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 030c 	and.w	r3, r3, #12
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d157      	bne.n	8001cfc <HAL_RCC_OscConfig+0x104>
 8001c4c:	4bae      	ldr	r3, [pc, #696]	@ (8001f08 <HAL_RCC_OscConfig+0x310>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c58:	d150      	bne.n	8001cfc <HAL_RCC_OscConfig+0x104>
 8001c5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c5e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001c66:	fa93 f3a3 	rbit	r3, r3
 8001c6a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c6e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c7a:	d802      	bhi.n	8001c82 <HAL_RCC_OscConfig+0x8a>
 8001c7c:	4ba2      	ldr	r3, [pc, #648]	@ (8001f08 <HAL_RCC_OscConfig+0x310>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	e015      	b.n	8001cae <HAL_RCC_OscConfig+0xb6>
 8001c82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c86:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001c8e:	fa93 f3a3 	rbit	r3, r3
 8001c92:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001c96:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c9a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001c9e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001ca2:	fa93 f3a3 	rbit	r3, r3
 8001ca6:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001caa:	4b97      	ldr	r3, [pc, #604]	@ (8001f08 <HAL_RCC_OscConfig+0x310>)
 8001cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cb2:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001cb6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001cba:	fa92 f2a2 	rbit	r2, r2
 8001cbe:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001cc2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001cc6:	fab2 f282 	clz	r2, r2
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	f042 0220 	orr.w	r2, r2, #32
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	f002 021f 	and.w	r2, r2, #31
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 8114 	beq.w	8001f0c <HAL_RCC_OscConfig+0x314>
 8001ce4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f040 810b 	bne.w	8001f0c <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	f000 bf85 	b.w	8002c06 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d0c:	d106      	bne.n	8001d1c <HAL_RCC_OscConfig+0x124>
 8001d0e:	4b7e      	ldr	r3, [pc, #504]	@ (8001f08 <HAL_RCC_OscConfig+0x310>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a7d      	ldr	r2, [pc, #500]	@ (8001f08 <HAL_RCC_OscConfig+0x310>)
 8001d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	e036      	b.n	8001d8a <HAL_RCC_OscConfig+0x192>
 8001d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d20:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10c      	bne.n	8001d46 <HAL_RCC_OscConfig+0x14e>
 8001d2c:	4b76      	ldr	r3, [pc, #472]	@ (8001f08 <HAL_RCC_OscConfig+0x310>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a75      	ldr	r2, [pc, #468]	@ (8001f08 <HAL_RCC_OscConfig+0x310>)
 8001d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	4b73      	ldr	r3, [pc, #460]	@ (8001f08 <HAL_RCC_OscConfig+0x310>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a72      	ldr	r2, [pc, #456]	@ (8001f08 <HAL_RCC_OscConfig+0x310>)
 8001d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	e021      	b.n	8001d8a <HAL_RCC_OscConfig+0x192>
 8001d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d56:	d10c      	bne.n	8001d72 <HAL_RCC_OscConfig+0x17a>
 8001d58:	4b6b      	ldr	r3, [pc, #428]	@ (8001f08 <HAL_RCC_OscConfig+0x310>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a6a      	ldr	r2, [pc, #424]	@ (8001f08 <HAL_RCC_OscConfig+0x310>)
 8001d5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	4b68      	ldr	r3, [pc, #416]	@ (8001f08 <HAL_RCC_OscConfig+0x310>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a67      	ldr	r2, [pc, #412]	@ (8001f08 <HAL_RCC_OscConfig+0x310>)
 8001d6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	e00b      	b.n	8001d8a <HAL_RCC_OscConfig+0x192>
 8001d72:	4b65      	ldr	r3, [pc, #404]	@ (8001f08 <HAL_RCC_OscConfig+0x310>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a64      	ldr	r2, [pc, #400]	@ (8001f08 <HAL_RCC_OscConfig+0x310>)
 8001d78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	4b62      	ldr	r3, [pc, #392]	@ (8001f08 <HAL_RCC_OscConfig+0x310>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a61      	ldr	r2, [pc, #388]	@ (8001f08 <HAL_RCC_OscConfig+0x310>)
 8001d84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d88:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d8a:	4b5f      	ldr	r3, [pc, #380]	@ (8001f08 <HAL_RCC_OscConfig+0x310>)
 8001d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8e:	f023 020f 	bic.w	r2, r3, #15
 8001d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	495a      	ldr	r1, [pc, #360]	@ (8001f08 <HAL_RCC_OscConfig+0x310>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001da4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d054      	beq.n	8001e5e <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db4:	f7fe fd8e 	bl	80008d4 <HAL_GetTick>
 8001db8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbc:	e00a      	b.n	8001dd4 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dbe:	f7fe fd89 	bl	80008d4 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b64      	cmp	r3, #100	@ 0x64
 8001dcc:	d902      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	f000 bf19 	b.w	8002c06 <HAL_RCC_OscConfig+0x100e>
 8001dd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dd8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ddc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001de0:	fa93 f3a3 	rbit	r3, r3
 8001de4:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001de8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dec:	fab3 f383 	clz	r3, r3
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001df4:	d802      	bhi.n	8001dfc <HAL_RCC_OscConfig+0x204>
 8001df6:	4b44      	ldr	r3, [pc, #272]	@ (8001f08 <HAL_RCC_OscConfig+0x310>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	e015      	b.n	8001e28 <HAL_RCC_OscConfig+0x230>
 8001dfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e00:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001e08:	fa93 f3a3 	rbit	r3, r3
 8001e0c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001e10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e14:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001e18:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001e24:	4b38      	ldr	r3, [pc, #224]	@ (8001f08 <HAL_RCC_OscConfig+0x310>)
 8001e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e28:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e2c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001e30:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001e34:	fa92 f2a2 	rbit	r2, r2
 8001e38:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001e3c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001e40:	fab2 f282 	clz	r2, r2
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	f042 0220 	orr.w	r2, r2, #32
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	f002 021f 	and.w	r2, r2, #31
 8001e50:	2101      	movs	r1, #1
 8001e52:	fa01 f202 	lsl.w	r2, r1, r2
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0b0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x1c6>
 8001e5c:	e057      	b.n	8001f0e <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5e:	f7fe fd39 	bl	80008d4 <HAL_GetTick>
 8001e62:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e66:	e00a      	b.n	8001e7e <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e68:	f7fe fd34 	bl	80008d4 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b64      	cmp	r3, #100	@ 0x64
 8001e76:	d902      	bls.n	8001e7e <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	f000 bec4 	b.w	8002c06 <HAL_RCC_OscConfig+0x100e>
 8001e7e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e82:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001e92:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e9e:	d802      	bhi.n	8001ea6 <HAL_RCC_OscConfig+0x2ae>
 8001ea0:	4b19      	ldr	r3, [pc, #100]	@ (8001f08 <HAL_RCC_OscConfig+0x310>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	e015      	b.n	8001ed2 <HAL_RCC_OscConfig+0x2da>
 8001ea6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001eaa:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eae:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001eb2:	fa93 f3a3 	rbit	r3, r3
 8001eb6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001eba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ebe:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001ec2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001ec6:	fa93 f3a3 	rbit	r3, r3
 8001eca:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001ece:	4b0e      	ldr	r3, [pc, #56]	@ (8001f08 <HAL_RCC_OscConfig+0x310>)
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ed6:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001eda:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001ede:	fa92 f2a2 	rbit	r2, r2
 8001ee2:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001ee6:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001eea:	fab2 f282 	clz	r2, r2
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	f042 0220 	orr.w	r2, r2, #32
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	f002 021f 	and.w	r2, r2, #31
 8001efa:	2101      	movs	r1, #1
 8001efc:	fa01 f202 	lsl.w	r2, r1, r2
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1b0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x270>
 8001f06:	e002      	b.n	8001f0e <HAL_RCC_OscConfig+0x316>
 8001f08:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 816c 	beq.w	80021fc <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f24:	4bcc      	ldr	r3, [pc, #816]	@ (8002258 <HAL_RCC_OscConfig+0x660>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00b      	beq.n	8001f48 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f30:	4bc9      	ldr	r3, [pc, #804]	@ (8002258 <HAL_RCC_OscConfig+0x660>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 030c 	and.w	r3, r3, #12
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d16d      	bne.n	8002018 <HAL_RCC_OscConfig+0x420>
 8001f3c:	4bc6      	ldr	r3, [pc, #792]	@ (8002258 <HAL_RCC_OscConfig+0x660>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d167      	bne.n	8002018 <HAL_RCC_OscConfig+0x420>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001f52:	fa93 f3a3 	rbit	r3, r3
 8001f56:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001f5a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5e:	fab3 f383 	clz	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f66:	d802      	bhi.n	8001f6e <HAL_RCC_OscConfig+0x376>
 8001f68:	4bbb      	ldr	r3, [pc, #748]	@ (8002258 <HAL_RCC_OscConfig+0x660>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	e013      	b.n	8001f96 <HAL_RCC_OscConfig+0x39e>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f74:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001f78:	fa93 f3a3 	rbit	r3, r3
 8001f7c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001f80:	2302      	movs	r3, #2
 8001f82:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001f86:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001f92:	4bb1      	ldr	r3, [pc, #708]	@ (8002258 <HAL_RCC_OscConfig+0x660>)
 8001f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f96:	2202      	movs	r2, #2
 8001f98:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001f9c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001fa0:	fa92 f2a2 	rbit	r2, r2
 8001fa4:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001fa8:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001fac:	fab2 f282 	clz	r2, r2
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	f042 0220 	orr.w	r2, r2, #32
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	f002 021f 	and.w	r2, r2, #31
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00a      	beq.n	8001fde <HAL_RCC_OscConfig+0x3e6>
 8001fc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fcc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d002      	beq.n	8001fde <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	f000 be14 	b.w	8002c06 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fde:	4b9e      	ldr	r3, [pc, #632]	@ (8002258 <HAL_RCC_OscConfig+0x660>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	21f8      	movs	r1, #248	@ 0xf8
 8001ff4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001ffc:	fa91 f1a1 	rbit	r1, r1
 8002000:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002004:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002008:	fab1 f181 	clz	r1, r1
 800200c:	b2c9      	uxtb	r1, r1
 800200e:	408b      	lsls	r3, r1
 8002010:	4991      	ldr	r1, [pc, #580]	@ (8002258 <HAL_RCC_OscConfig+0x660>)
 8002012:	4313      	orrs	r3, r2
 8002014:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002016:	e0f1      	b.n	80021fc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800201c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 8083 	beq.w	8002130 <HAL_RCC_OscConfig+0x538>
 800202a:	2301      	movs	r3, #1
 800202c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002034:	fa93 f3a3 	rbit	r3, r3
 8002038:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800203c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002040:	fab3 f383 	clz	r3, r3
 8002044:	b2db      	uxtb	r3, r3
 8002046:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800204a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	461a      	mov	r2, r3
 8002052:	2301      	movs	r3, #1
 8002054:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002056:	f7fe fc3d 	bl	80008d4 <HAL_GetTick>
 800205a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205e:	e00a      	b.n	8002076 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002060:	f7fe fc38 	bl	80008d4 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d902      	bls.n	8002076 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	f000 bdc8 	b.w	8002c06 <HAL_RCC_OscConfig+0x100e>
 8002076:	2302      	movs	r3, #2
 8002078:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002088:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208c:	fab3 f383 	clz	r3, r3
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b3f      	cmp	r3, #63	@ 0x3f
 8002094:	d802      	bhi.n	800209c <HAL_RCC_OscConfig+0x4a4>
 8002096:	4b70      	ldr	r3, [pc, #448]	@ (8002258 <HAL_RCC_OscConfig+0x660>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	e013      	b.n	80020c4 <HAL_RCC_OscConfig+0x4cc>
 800209c:	2302      	movs	r3, #2
 800209e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80020ae:	2302      	movs	r3, #2
 80020b0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80020b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80020b8:	fa93 f3a3 	rbit	r3, r3
 80020bc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80020c0:	4b65      	ldr	r3, [pc, #404]	@ (8002258 <HAL_RCC_OscConfig+0x660>)
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	2202      	movs	r2, #2
 80020c6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80020ca:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80020ce:	fa92 f2a2 	rbit	r2, r2
 80020d2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80020d6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80020da:	fab2 f282 	clz	r2, r2
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	f042 0220 	orr.w	r2, r2, #32
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	f002 021f 	and.w	r2, r2, #31
 80020ea:	2101      	movs	r1, #1
 80020ec:	fa01 f202 	lsl.w	r2, r1, r2
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0b4      	beq.n	8002060 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f6:	4b58      	ldr	r3, [pc, #352]	@ (8002258 <HAL_RCC_OscConfig+0x660>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002102:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	21f8      	movs	r1, #248	@ 0xf8
 800210c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002110:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002114:	fa91 f1a1 	rbit	r1, r1
 8002118:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800211c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002120:	fab1 f181 	clz	r1, r1
 8002124:	b2c9      	uxtb	r1, r1
 8002126:	408b      	lsls	r3, r1
 8002128:	494b      	ldr	r1, [pc, #300]	@ (8002258 <HAL_RCC_OscConfig+0x660>)
 800212a:	4313      	orrs	r3, r2
 800212c:	600b      	str	r3, [r1, #0]
 800212e:	e065      	b.n	80021fc <HAL_RCC_OscConfig+0x604>
 8002130:	2301      	movs	r3, #1
 8002132:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002136:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800213a:	fa93 f3a3 	rbit	r3, r3
 800213e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002142:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002146:	fab3 f383 	clz	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002150:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	461a      	mov	r2, r3
 8002158:	2300      	movs	r3, #0
 800215a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7fe fbba 	bl	80008d4 <HAL_GetTick>
 8002160:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002164:	e00a      	b.n	800217c <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002166:	f7fe fbb5 	bl	80008d4 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d902      	bls.n	800217c <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	f000 bd45 	b.w	8002c06 <HAL_RCC_OscConfig+0x100e>
 800217c:	2302      	movs	r3, #2
 800217e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002186:	fa93 f3a3 	rbit	r3, r3
 800218a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800218e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002192:	fab3 f383 	clz	r3, r3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b3f      	cmp	r3, #63	@ 0x3f
 800219a:	d802      	bhi.n	80021a2 <HAL_RCC_OscConfig+0x5aa>
 800219c:	4b2e      	ldr	r3, [pc, #184]	@ (8002258 <HAL_RCC_OscConfig+0x660>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	e013      	b.n	80021ca <HAL_RCC_OscConfig+0x5d2>
 80021a2:	2302      	movs	r3, #2
 80021a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80021ac:	fa93 f3a3 	rbit	r3, r3
 80021b0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80021b4:	2302      	movs	r3, #2
 80021b6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80021ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80021be:	fa93 f3a3 	rbit	r3, r3
 80021c2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80021c6:	4b24      	ldr	r3, [pc, #144]	@ (8002258 <HAL_RCC_OscConfig+0x660>)
 80021c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ca:	2202      	movs	r2, #2
 80021cc:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80021d0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80021d4:	fa92 f2a2 	rbit	r2, r2
 80021d8:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80021dc:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80021e0:	fab2 f282 	clz	r2, r2
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	f042 0220 	orr.w	r2, r2, #32
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	f002 021f 	and.w	r2, r2, #31
 80021f0:	2101      	movs	r1, #1
 80021f2:	fa01 f202 	lsl.w	r2, r1, r2
 80021f6:	4013      	ands	r3, r2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1b4      	bne.n	8002166 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002200:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 8115 	beq.w	800243c <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002212:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002216:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d07e      	beq.n	8002320 <HAL_RCC_OscConfig+0x728>
 8002222:	2301      	movs	r3, #1
 8002224:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800222c:	fa93 f3a3 	rbit	r3, r3
 8002230:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002234:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002238:	fab3 f383 	clz	r3, r3
 800223c:	b2db      	uxtb	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	4b06      	ldr	r3, [pc, #24]	@ (800225c <HAL_RCC_OscConfig+0x664>)
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	461a      	mov	r2, r3
 8002248:	2301      	movs	r3, #1
 800224a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224c:	f7fe fb42 	bl	80008d4 <HAL_GetTick>
 8002250:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002254:	e00f      	b.n	8002276 <HAL_RCC_OscConfig+0x67e>
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000
 800225c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002260:	f7fe fb38 	bl	80008d4 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d902      	bls.n	8002276 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	f000 bcc8 	b.w	8002c06 <HAL_RCC_OscConfig+0x100e>
 8002276:	2302      	movs	r3, #2
 8002278:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002280:	fa93 f3a3 	rbit	r3, r3
 8002284:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002290:	2202      	movs	r2, #2
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002298:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	fa93 f2a3 	rbit	r2, r3
 80022a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80022b4:	2202      	movs	r2, #2
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	fa93 f2a3 	rbit	r2, r3
 80022c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d0:	4bb0      	ldr	r3, [pc, #704]	@ (8002594 <HAL_RCC_OscConfig+0x99c>)
 80022d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80022dc:	2102      	movs	r1, #2
 80022de:	6019      	str	r1, [r3, #0]
 80022e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	fa93 f1a3 	rbit	r1, r3
 80022ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80022f6:	6019      	str	r1, [r3, #0]
  return result;
 80022f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800230c:	b2db      	uxtb	r3, r3
 800230e:	f003 031f 	and.w	r3, r3, #31
 8002312:	2101      	movs	r1, #1
 8002314:	fa01 f303 	lsl.w	r3, r1, r3
 8002318:	4013      	ands	r3, r2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0a0      	beq.n	8002260 <HAL_RCC_OscConfig+0x668>
 800231e:	e08d      	b.n	800243c <HAL_RCC_OscConfig+0x844>
 8002320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002324:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002328:	2201      	movs	r2, #1
 800232a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002330:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	fa93 f2a3 	rbit	r2, r3
 800233a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800233e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002342:	601a      	str	r2, [r3, #0]
  return result;
 8002344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002348:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800234c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800234e:	fab3 f383 	clz	r3, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	4b90      	ldr	r3, [pc, #576]	@ (8002598 <HAL_RCC_OscConfig+0x9a0>)
 8002358:	4413      	add	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	461a      	mov	r2, r3
 800235e:	2300      	movs	r3, #0
 8002360:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002362:	f7fe fab7 	bl	80008d4 <HAL_GetTick>
 8002366:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236a:	e00a      	b.n	8002382 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800236c:	f7fe fab2 	bl	80008d4 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d902      	bls.n	8002382 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	f000 bc42 	b.w	8002c06 <HAL_RCC_OscConfig+0x100e>
 8002382:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002386:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800238a:	2202      	movs	r2, #2
 800238c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002392:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	fa93 f2a3 	rbit	r2, r3
 800239c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023aa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80023ae:	2202      	movs	r2, #2
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	fa93 f2a3 	rbit	r2, r3
 80023c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ce:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80023d2:	2202      	movs	r2, #2
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023da:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	fa93 f2a3 	rbit	r2, r3
 80023e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80023ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ee:	4b69      	ldr	r3, [pc, #420]	@ (8002594 <HAL_RCC_OscConfig+0x99c>)
 80023f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80023fa:	2102      	movs	r1, #2
 80023fc:	6019      	str	r1, [r3, #0]
 80023fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002402:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	fa93 f1a3 	rbit	r1, r3
 800240c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002410:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002414:	6019      	str	r1, [r3, #0]
  return result;
 8002416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	fab3 f383 	clz	r3, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	2101      	movs	r1, #1
 8002432:	fa01 f303 	lsl.w	r3, r1, r3
 8002436:	4013      	ands	r3, r2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d197      	bne.n	800236c <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800243c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002440:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 819e 	beq.w	800278e <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002452:	2300      	movs	r3, #0
 8002454:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002458:	4b4e      	ldr	r3, [pc, #312]	@ (8002594 <HAL_RCC_OscConfig+0x99c>)
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d116      	bne.n	8002492 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002464:	4b4b      	ldr	r3, [pc, #300]	@ (8002594 <HAL_RCC_OscConfig+0x99c>)
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	4a4a      	ldr	r2, [pc, #296]	@ (8002594 <HAL_RCC_OscConfig+0x99c>)
 800246a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800246e:	61d3      	str	r3, [r2, #28]
 8002470:	4b48      	ldr	r3, [pc, #288]	@ (8002594 <HAL_RCC_OscConfig+0x99c>)
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800247c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002486:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800248a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800248c:	2301      	movs	r3, #1
 800248e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002492:	4b42      	ldr	r3, [pc, #264]	@ (800259c <HAL_RCC_OscConfig+0x9a4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d11a      	bne.n	80024d4 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800249e:	4b3f      	ldr	r3, [pc, #252]	@ (800259c <HAL_RCC_OscConfig+0x9a4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a3e      	ldr	r2, [pc, #248]	@ (800259c <HAL_RCC_OscConfig+0x9a4>)
 80024a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024aa:	f7fe fa13 	bl	80008d4 <HAL_GetTick>
 80024ae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b2:	e009      	b.n	80024c8 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b4:	f7fe fa0e 	bl	80008d4 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b64      	cmp	r3, #100	@ 0x64
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e39e      	b.n	8002c06 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c8:	4b34      	ldr	r3, [pc, #208]	@ (800259c <HAL_RCC_OscConfig+0x9a4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0ef      	beq.n	80024b4 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d106      	bne.n	80024f2 <HAL_RCC_OscConfig+0x8fa>
 80024e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002594 <HAL_RCC_OscConfig+0x99c>)
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	4a2a      	ldr	r2, [pc, #168]	@ (8002594 <HAL_RCC_OscConfig+0x99c>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6213      	str	r3, [r2, #32]
 80024f0:	e035      	b.n	800255e <HAL_RCC_OscConfig+0x966>
 80024f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0x924>
 8002502:	4b24      	ldr	r3, [pc, #144]	@ (8002594 <HAL_RCC_OscConfig+0x99c>)
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	4a23      	ldr	r2, [pc, #140]	@ (8002594 <HAL_RCC_OscConfig+0x99c>)
 8002508:	f023 0301 	bic.w	r3, r3, #1
 800250c:	6213      	str	r3, [r2, #32]
 800250e:	4b21      	ldr	r3, [pc, #132]	@ (8002594 <HAL_RCC_OscConfig+0x99c>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	4a20      	ldr	r2, [pc, #128]	@ (8002594 <HAL_RCC_OscConfig+0x99c>)
 8002514:	f023 0304 	bic.w	r3, r3, #4
 8002518:	6213      	str	r3, [r2, #32]
 800251a:	e020      	b.n	800255e <HAL_RCC_OscConfig+0x966>
 800251c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002520:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2b05      	cmp	r3, #5
 800252a:	d10c      	bne.n	8002546 <HAL_RCC_OscConfig+0x94e>
 800252c:	4b19      	ldr	r3, [pc, #100]	@ (8002594 <HAL_RCC_OscConfig+0x99c>)
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	4a18      	ldr	r2, [pc, #96]	@ (8002594 <HAL_RCC_OscConfig+0x99c>)
 8002532:	f043 0304 	orr.w	r3, r3, #4
 8002536:	6213      	str	r3, [r2, #32]
 8002538:	4b16      	ldr	r3, [pc, #88]	@ (8002594 <HAL_RCC_OscConfig+0x99c>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	4a15      	ldr	r2, [pc, #84]	@ (8002594 <HAL_RCC_OscConfig+0x99c>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6213      	str	r3, [r2, #32]
 8002544:	e00b      	b.n	800255e <HAL_RCC_OscConfig+0x966>
 8002546:	4b13      	ldr	r3, [pc, #76]	@ (8002594 <HAL_RCC_OscConfig+0x99c>)
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	4a12      	ldr	r2, [pc, #72]	@ (8002594 <HAL_RCC_OscConfig+0x99c>)
 800254c:	f023 0301 	bic.w	r3, r3, #1
 8002550:	6213      	str	r3, [r2, #32]
 8002552:	4b10      	ldr	r3, [pc, #64]	@ (8002594 <HAL_RCC_OscConfig+0x99c>)
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	4a0f      	ldr	r2, [pc, #60]	@ (8002594 <HAL_RCC_OscConfig+0x99c>)
 8002558:	f023 0304 	bic.w	r3, r3, #4
 800255c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800255e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002562:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 8087 	beq.w	800267e <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002570:	f7fe f9b0 	bl	80008d4 <HAL_GetTick>
 8002574:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002578:	e012      	b.n	80025a0 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800257a:	f7fe f9ab 	bl	80008d4 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d908      	bls.n	80025a0 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e339      	b.n	8002c06 <HAL_RCC_OscConfig+0x100e>
 8002592:	bf00      	nop
 8002594:	40021000 	.word	0x40021000
 8002598:	10908120 	.word	0x10908120
 800259c:	40007000 	.word	0x40007000
 80025a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80025a8:	2202      	movs	r2, #2
 80025aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	fa93 f2a3 	rbit	r2, r3
 80025ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025be:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80025cc:	2202      	movs	r2, #2
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	fa93 f2a3 	rbit	r2, r3
 80025de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80025e6:	601a      	str	r2, [r3, #0]
  return result;
 80025e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ec:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80025f0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f2:	fab3 f383 	clz	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d102      	bne.n	8002608 <HAL_RCC_OscConfig+0xa10>
 8002602:	4b98      	ldr	r3, [pc, #608]	@ (8002864 <HAL_RCC_OscConfig+0xc6c>)
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	e013      	b.n	8002630 <HAL_RCC_OscConfig+0xa38>
 8002608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002610:	2202      	movs	r2, #2
 8002612:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002618:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	fa93 f2a3 	rbit	r2, r3
 8002622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002626:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	4b8d      	ldr	r3, [pc, #564]	@ (8002864 <HAL_RCC_OscConfig+0xc6c>)
 800262e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002630:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002634:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002638:	2102      	movs	r1, #2
 800263a:	6011      	str	r1, [r2, #0]
 800263c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002640:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	fa92 f1a2 	rbit	r1, r2
 800264a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800264e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002652:	6011      	str	r1, [r2, #0]
  return result;
 8002654:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002658:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	fab2 f282 	clz	r2, r2
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	f002 021f 	and.w	r2, r2, #31
 800266e:	2101      	movs	r1, #1
 8002670:	fa01 f202 	lsl.w	r2, r1, r2
 8002674:	4013      	ands	r3, r2
 8002676:	2b00      	cmp	r3, #0
 8002678:	f43f af7f 	beq.w	800257a <HAL_RCC_OscConfig+0x982>
 800267c:	e07d      	b.n	800277a <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267e:	f7fe f929 	bl	80008d4 <HAL_GetTick>
 8002682:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002686:	e00b      	b.n	80026a0 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002688:	f7fe f924 	bl	80008d4 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002698:	4293      	cmp	r3, r2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e2b2      	b.n	8002c06 <HAL_RCC_OscConfig+0x100e>
 80026a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80026a8:	2202      	movs	r2, #2
 80026aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	fa93 f2a3 	rbit	r2, r3
 80026ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026be:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80026cc:	2202      	movs	r2, #2
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	fa93 f2a3 	rbit	r2, r3
 80026de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80026e6:	601a      	str	r2, [r3, #0]
  return result;
 80026e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ec:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80026f0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d102      	bne.n	8002708 <HAL_RCC_OscConfig+0xb10>
 8002702:	4b58      	ldr	r3, [pc, #352]	@ (8002864 <HAL_RCC_OscConfig+0xc6c>)
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	e013      	b.n	8002730 <HAL_RCC_OscConfig+0xb38>
 8002708:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800270c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002710:	2202      	movs	r2, #2
 8002712:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002718:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	fa93 f2a3 	rbit	r2, r3
 8002722:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002726:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	4b4d      	ldr	r3, [pc, #308]	@ (8002864 <HAL_RCC_OscConfig+0xc6c>)
 800272e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002730:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002734:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002738:	2102      	movs	r1, #2
 800273a:	6011      	str	r1, [r2, #0]
 800273c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002740:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	fa92 f1a2 	rbit	r1, r2
 800274a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800274e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002752:	6011      	str	r1, [r2, #0]
  return result;
 8002754:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002758:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	fab2 f282 	clz	r2, r2
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	f002 021f 	and.w	r2, r2, #31
 800276e:	2101      	movs	r1, #1
 8002770:	fa01 f202 	lsl.w	r2, r1, r2
 8002774:	4013      	ands	r3, r2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d186      	bne.n	8002688 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800277a:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800277e:	2b01      	cmp	r3, #1
 8002780:	d105      	bne.n	800278e <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002782:	4b38      	ldr	r3, [pc, #224]	@ (8002864 <HAL_RCC_OscConfig+0xc6c>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	4a37      	ldr	r2, [pc, #220]	@ (8002864 <HAL_RCC_OscConfig+0xc6c>)
 8002788:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800278c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800278e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002792:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 8232 	beq.w	8002c04 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a0:	4b30      	ldr	r3, [pc, #192]	@ (8002864 <HAL_RCC_OscConfig+0xc6c>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 030c 	and.w	r3, r3, #12
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	f000 8201 	beq.w	8002bb0 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	f040 8157 	bne.w	8002a6e <HAL_RCC_OscConfig+0xe76>
 80027c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80027c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	fa93 f2a3 	rbit	r2, r3
 80027dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80027e4:	601a      	str	r2, [r3, #0]
  return result;
 80027e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ea:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80027ee:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f0:	fab3 f383 	clz	r3, r3
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027fa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	461a      	mov	r2, r3
 8002802:	2300      	movs	r3, #0
 8002804:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002806:	f7fe f865 	bl	80008d4 <HAL_GetTick>
 800280a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800280e:	e009      	b.n	8002824 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002810:	f7fe f860 	bl	80008d4 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e1f0      	b.n	8002c06 <HAL_RCC_OscConfig+0x100e>
 8002824:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002828:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800282c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002830:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002836:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	fa93 f2a3 	rbit	r2, r3
 8002840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002844:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002848:	601a      	str	r2, [r3, #0]
  return result;
 800284a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002852:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002854:	fab3 f383 	clz	r3, r3
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b3f      	cmp	r3, #63	@ 0x3f
 800285c:	d804      	bhi.n	8002868 <HAL_RCC_OscConfig+0xc70>
 800285e:	4b01      	ldr	r3, [pc, #4]	@ (8002864 <HAL_RCC_OscConfig+0xc6c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	e029      	b.n	80028b8 <HAL_RCC_OscConfig+0xcc0>
 8002864:	40021000 	.word	0x40021000
 8002868:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002870:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002874:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800287a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	fa93 f2a3 	rbit	r2, r3
 8002884:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002888:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002892:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002896:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	fa93 f2a3 	rbit	r2, r3
 80028aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ae:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	4bc3      	ldr	r3, [pc, #780]	@ (8002bc4 <HAL_RCC_OscConfig+0xfcc>)
 80028b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028bc:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80028c0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80028c4:	6011      	str	r1, [r2, #0]
 80028c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028ca:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	fa92 f1a2 	rbit	r1, r2
 80028d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028d8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80028dc:	6011      	str	r1, [r2, #0]
  return result;
 80028de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028e2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	fab2 f282 	clz	r2, r2
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	f042 0220 	orr.w	r2, r2, #32
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	f002 021f 	and.w	r2, r2, #31
 80028f8:	2101      	movs	r1, #1
 80028fa:	fa01 f202 	lsl.w	r2, r1, r2
 80028fe:	4013      	ands	r3, r2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d185      	bne.n	8002810 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002904:	4baf      	ldr	r3, [pc, #700]	@ (8002bc4 <HAL_RCC_OscConfig+0xfcc>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800290c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002910:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	430b      	orrs	r3, r1
 8002926:	49a7      	ldr	r1, [pc, #668]	@ (8002bc4 <HAL_RCC_OscConfig+0xfcc>)
 8002928:	4313      	orrs	r3, r2
 800292a:	604b      	str	r3, [r1, #4]
 800292c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002930:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002934:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002938:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	fa93 f2a3 	rbit	r2, r3
 8002948:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002950:	601a      	str	r2, [r3, #0]
  return result;
 8002952:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002956:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800295a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800295c:	fab3 f383 	clz	r3, r3
 8002960:	b2db      	uxtb	r3, r3
 8002962:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002966:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	461a      	mov	r2, r3
 800296e:	2301      	movs	r3, #1
 8002970:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002972:	f7fd ffaf 	bl	80008d4 <HAL_GetTick>
 8002976:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800297a:	e009      	b.n	8002990 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800297c:	f7fd ffaa 	bl	80008d4 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e13a      	b.n	8002c06 <HAL_RCC_OscConfig+0x100e>
 8002990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002994:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002998:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800299c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	fa93 f2a3 	rbit	r2, r3
 80029ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80029b4:	601a      	str	r2, [r3, #0]
  return result;
 80029b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ba:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80029be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029c0:	fab3 f383 	clz	r3, r3
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80029c8:	d802      	bhi.n	80029d0 <HAL_RCC_OscConfig+0xdd8>
 80029ca:	4b7e      	ldr	r3, [pc, #504]	@ (8002bc4 <HAL_RCC_OscConfig+0xfcc>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	e027      	b.n	8002a20 <HAL_RCC_OscConfig+0xe28>
 80029d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80029d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	fa93 f2a3 	rbit	r2, r3
 80029ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fa:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80029fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a08:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	fa93 f2a3 	rbit	r2, r3
 8002a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a16:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	4b69      	ldr	r3, [pc, #420]	@ (8002bc4 <HAL_RCC_OscConfig+0xfcc>)
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a20:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a24:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002a28:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002a2c:	6011      	str	r1, [r2, #0]
 8002a2e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a32:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002a36:	6812      	ldr	r2, [r2, #0]
 8002a38:	fa92 f1a2 	rbit	r1, r2
 8002a3c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a40:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002a44:	6011      	str	r1, [r2, #0]
  return result;
 8002a46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a4a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	fab2 f282 	clz	r2, r2
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	f042 0220 	orr.w	r2, r2, #32
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	f002 021f 	and.w	r2, r2, #31
 8002a60:	2101      	movs	r1, #1
 8002a62:	fa01 f202 	lsl.w	r2, r1, r2
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d087      	beq.n	800297c <HAL_RCC_OscConfig+0xd84>
 8002a6c:	e0ca      	b.n	8002c04 <HAL_RCC_OscConfig+0x100c>
 8002a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a72:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002a76:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a80:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	fa93 f2a3 	rbit	r2, r3
 8002a8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002a92:	601a      	str	r2, [r3, #0]
  return result;
 8002a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a98:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002a9c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002aa8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	461a      	mov	r2, r3
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7fd ff0e 	bl	80008d4 <HAL_GetTick>
 8002ab8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002abc:	e009      	b.n	8002ad2 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002abe:	f7fd ff09 	bl	80008d4 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e099      	b.n	8002c06 <HAL_RCC_OscConfig+0x100e>
 8002ad2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002ada:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ade:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	fa93 f2a3 	rbit	r2, r3
 8002aee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002af6:	601a      	str	r2, [r3, #0]
  return result;
 8002af8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002b00:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b02:	fab3 f383 	clz	r3, r3
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b0a:	d802      	bhi.n	8002b12 <HAL_RCC_OscConfig+0xf1a>
 8002b0c:	4b2d      	ldr	r3, [pc, #180]	@ (8002bc4 <HAL_RCC_OscConfig+0xfcc>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	e027      	b.n	8002b62 <HAL_RCC_OscConfig+0xf6a>
 8002b12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b16:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002b1a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b24:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	fa93 f2a3 	rbit	r2, r3
 8002b2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b32:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b3c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002b40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	fa93 f2a3 	rbit	r2, r3
 8002b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b58:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	4b19      	ldr	r3, [pc, #100]	@ (8002bc4 <HAL_RCC_OscConfig+0xfcc>)
 8002b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b62:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b66:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002b6a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b6e:	6011      	str	r1, [r2, #0]
 8002b70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b74:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002b78:	6812      	ldr	r2, [r2, #0]
 8002b7a:	fa92 f1a2 	rbit	r1, r2
 8002b7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b82:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002b86:	6011      	str	r1, [r2, #0]
  return result;
 8002b88:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b8c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	fab2 f282 	clz	r2, r2
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	f042 0220 	orr.w	r2, r2, #32
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	f002 021f 	and.w	r2, r2, #31
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d187      	bne.n	8002abe <HAL_RCC_OscConfig+0xec6>
 8002bae:	e029      	b.n	8002c04 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d103      	bne.n	8002bc8 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e020      	b.n	8002c06 <HAL_RCC_OscConfig+0x100e>
 8002bc4:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bc8:	4b11      	ldr	r3, [pc, #68]	@ (8002c10 <HAL_RCC_OscConfig+0x1018>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002bd0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002bd4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002bd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bdc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d10b      	bne.n	8002c00 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002be8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002bec:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002bf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40021000 	.word	0x40021000

08002c14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b09e      	sub	sp, #120	@ 0x78
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e154      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b89      	ldr	r3, [pc, #548]	@ (8002e54 <HAL_RCC_ClockConfig+0x240>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d910      	bls.n	8002c5c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b86      	ldr	r3, [pc, #536]	@ (8002e54 <HAL_RCC_ClockConfig+0x240>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 0207 	bic.w	r2, r3, #7
 8002c42:	4984      	ldr	r1, [pc, #528]	@ (8002e54 <HAL_RCC_ClockConfig+0x240>)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4a:	4b82      	ldr	r3, [pc, #520]	@ (8002e54 <HAL_RCC_ClockConfig+0x240>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e13c      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c68:	4b7b      	ldr	r3, [pc, #492]	@ (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	4978      	ldr	r1, [pc, #480]	@ (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 80cd 	beq.w	8002e22 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d137      	bne.n	8002d00 <HAL_RCC_ClockConfig+0xec>
 8002c90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c94:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c98:	fa93 f3a3 	rbit	r3, r3
 8002c9c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002c9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca0:	fab3 f383 	clz	r3, r3
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ca8:	d802      	bhi.n	8002cb0 <HAL_RCC_ClockConfig+0x9c>
 8002caa:	4b6b      	ldr	r3, [pc, #428]	@ (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	e00f      	b.n	8002cd0 <HAL_RCC_ClockConfig+0xbc>
 8002cb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cb4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cb8:	fa93 f3a3 	rbit	r3, r3
 8002cbc:	667b      	str	r3, [r7, #100]	@ 0x64
 8002cbe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cc2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ccc:	4b62      	ldr	r3, [pc, #392]	@ (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002cd4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002cd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002cd8:	fa92 f2a2 	rbit	r2, r2
 8002cdc:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002cde:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002ce0:	fab2 f282 	clz	r2, r2
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	f042 0220 	orr.w	r2, r2, #32
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	f002 021f 	and.w	r2, r2, #31
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d171      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0ea      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d137      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x164>
 8002d08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d0c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d10:	fa93 f3a3 	rbit	r3, r3
 8002d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d18:	fab3 f383 	clz	r3, r3
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d20:	d802      	bhi.n	8002d28 <HAL_RCC_ClockConfig+0x114>
 8002d22:	4b4d      	ldr	r3, [pc, #308]	@ (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	e00f      	b.n	8002d48 <HAL_RCC_ClockConfig+0x134>
 8002d28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d30:	fa93 f3a3 	rbit	r3, r3
 8002d34:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d44:	4b44      	ldr	r3, [pc, #272]	@ (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d4c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002d4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d50:	fa92 f2a2 	rbit	r2, r2
 8002d54:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002d56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d58:	fab2 f282 	clz	r2, r2
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	f042 0220 	orr.w	r2, r2, #32
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	f002 021f 	and.w	r2, r2, #31
 8002d68:	2101      	movs	r1, #1
 8002d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d135      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0ae      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x2c2>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7e:	fa93 f3a3 	rbit	r3, r3
 8002d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d86:	fab3 f383 	clz	r3, r3
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d8e:	d802      	bhi.n	8002d96 <HAL_RCC_ClockConfig+0x182>
 8002d90:	4b31      	ldr	r3, [pc, #196]	@ (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	e00d      	b.n	8002db2 <HAL_RCC_ClockConfig+0x19e>
 8002d96:	2302      	movs	r3, #2
 8002d98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9c:	fa93 f3a3 	rbit	r3, r3
 8002da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002da2:	2302      	movs	r3, #2
 8002da4:	623b      	str	r3, [r7, #32]
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	fa93 f3a3 	rbit	r3, r3
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	4b2a      	ldr	r3, [pc, #168]	@ (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db2:	2202      	movs	r2, #2
 8002db4:	61ba      	str	r2, [r7, #24]
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	fa92 f2a2 	rbit	r2, r2
 8002dbc:	617a      	str	r2, [r7, #20]
  return result;
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	fab2 f282 	clz	r2, r2
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	f042 0220 	orr.w	r2, r2, #32
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	f002 021f 	and.w	r2, r2, #31
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e07a      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002de0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f023 0203 	bic.w	r2, r3, #3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	491a      	ldr	r1, [pc, #104]	@ (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002df2:	f7fd fd6f 	bl	80008d4 <HAL_GetTick>
 8002df6:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df8:	e00a      	b.n	8002e10 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfa:	f7fd fd6b 	bl	80008d4 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e062      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e10:	4b11      	ldr	r3, [pc, #68]	@ (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 020c 	and.w	r2, r3, #12
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d1eb      	bne.n	8002dfa <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e22:	4b0c      	ldr	r3, [pc, #48]	@ (8002e54 <HAL_RCC_ClockConfig+0x240>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d215      	bcs.n	8002e5c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e30:	4b08      	ldr	r3, [pc, #32]	@ (8002e54 <HAL_RCC_ClockConfig+0x240>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f023 0207 	bic.w	r2, r3, #7
 8002e38:	4906      	ldr	r1, [pc, #24]	@ (8002e54 <HAL_RCC_ClockConfig+0x240>)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e40:	4b04      	ldr	r3, [pc, #16]	@ (8002e54 <HAL_RCC_ClockConfig+0x240>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d006      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e041      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x2c2>
 8002e52:	bf00      	nop
 8002e54:	40022000 	.word	0x40022000
 8002e58:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e68:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee0 <HAL_RCC_ClockConfig+0x2cc>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	491a      	ldr	r1, [pc, #104]	@ (8002ee0 <HAL_RCC_ClockConfig+0x2cc>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d009      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e86:	4b16      	ldr	r3, [pc, #88]	@ (8002ee0 <HAL_RCC_ClockConfig+0x2cc>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4912      	ldr	r1, [pc, #72]	@ (8002ee0 <HAL_RCC_ClockConfig+0x2cc>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e9a:	f000 f829 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 8002e9e:	4601      	mov	r1, r0
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee0 <HAL_RCC_ClockConfig+0x2cc>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ea8:	22f0      	movs	r2, #240	@ 0xf0
 8002eaa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	fa92 f2a2 	rbit	r2, r2
 8002eb2:	60fa      	str	r2, [r7, #12]
  return result;
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	fab2 f282 	clz	r2, r2
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	40d3      	lsrs	r3, r2
 8002ebe:	4a09      	ldr	r2, [pc, #36]	@ (8002ee4 <HAL_RCC_ClockConfig+0x2d0>)
 8002ec0:	5cd3      	ldrb	r3, [r2, r3]
 8002ec2:	fa21 f303 	lsr.w	r3, r1, r3
 8002ec6:	4a08      	ldr	r2, [pc, #32]	@ (8002ee8 <HAL_RCC_ClockConfig+0x2d4>)
 8002ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002eca:	4b08      	ldr	r3, [pc, #32]	@ (8002eec <HAL_RCC_ClockConfig+0x2d8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fd fcbc 	bl	800084c <HAL_InitTick>
  
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3778      	adds	r7, #120	@ 0x78
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	08004628 	.word	0x08004628
 8002ee8:	20000000 	.word	0x20000000
 8002eec:	20000004 	.word	0x20000004

08002ef0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	2300      	movs	r3, #0
 8002f04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d002      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x30>
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCC_GetSysClockFreq+0x36>
 8002f1e:	e026      	b.n	8002f6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f20:	4b19      	ldr	r3, [pc, #100]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f22:	613b      	str	r3, [r7, #16]
      break;
 8002f24:	e026      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	0c9b      	lsrs	r3, r3, #18
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	4a17      	ldr	r2, [pc, #92]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f30:	5cd3      	ldrb	r3, [r2, r3]
 8002f32:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002f34:	4b13      	ldr	r3, [pc, #76]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f38:	f003 030f 	and.w	r3, r3, #15
 8002f3c:	4a14      	ldr	r2, [pc, #80]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f3e:	5cd3      	ldrb	r3, [r2, r3]
 8002f40:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f4c:	4a0e      	ldr	r2, [pc, #56]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	fb02 f303 	mul.w	r3, r2, r3
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	e004      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a0c      	ldr	r2, [pc, #48]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f62:	fb02 f303 	mul.w	r3, r2, r3
 8002f66:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	613b      	str	r3, [r7, #16]
      break;
 8002f6c:	e002      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f6e:	4b06      	ldr	r3, [pc, #24]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f70:	613b      	str	r3, [r7, #16]
      break;
 8002f72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f74:	693b      	ldr	r3, [r7, #16]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	371c      	adds	r7, #28
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
 8002f88:	007a1200 	.word	0x007a1200
 8002f8c:	08004640 	.word	0x08004640
 8002f90:	08004650 	.word	0x08004650
 8002f94:	003d0900 	.word	0x003d0900

08002f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f9c:	4b03      	ldr	r3, [pc, #12]	@ (8002fac <HAL_RCC_GetHCLKFreq+0x14>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	20000000 	.word	0x20000000

08002fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002fb6:	f7ff ffef 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002fba:	4601      	mov	r1, r0
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002fec <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002fc4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002fc8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	fa92 f2a2 	rbit	r2, r2
 8002fd0:	603a      	str	r2, [r7, #0]
  return result;
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	fab2 f282 	clz	r2, r2
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	40d3      	lsrs	r3, r2
 8002fdc:	4a04      	ldr	r2, [pc, #16]	@ (8002ff0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002fde:	5cd3      	ldrb	r3, [r2, r3]
 8002fe0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	08004638 	.word	0x08004638

08002ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ffa:	f7ff ffcd 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002ffe:	4601      	mov	r1, r0
 8003000:	4b0b      	ldr	r3, [pc, #44]	@ (8003030 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003008:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800300c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	fa92 f2a2 	rbit	r2, r2
 8003014:	603a      	str	r2, [r7, #0]
  return result;
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	fab2 f282 	clz	r2, r2
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	40d3      	lsrs	r3, r2
 8003020:	4a04      	ldr	r2, [pc, #16]	@ (8003034 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003022:	5cd3      	ldrb	r3, [r2, r3]
 8003024:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40021000 	.word	0x40021000
 8003034:	08004638 	.word	0x08004638

08003038 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b092      	sub	sp, #72	@ 0x48
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003048:	2300      	movs	r3, #0
 800304a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 80cb 	beq.w	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800305c:	4b85      	ldr	r3, [pc, #532]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10e      	bne.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003068:	4b82      	ldr	r3, [pc, #520]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	4a81      	ldr	r2, [pc, #516]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800306e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003072:	61d3      	str	r3, [r2, #28]
 8003074:	4b7f      	ldr	r3, [pc, #508]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003080:	2301      	movs	r3, #1
 8003082:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003086:	4b7c      	ldr	r3, [pc, #496]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308e:	2b00      	cmp	r3, #0
 8003090:	d118      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003092:	4b79      	ldr	r3, [pc, #484]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a78      	ldr	r2, [pc, #480]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800309c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800309e:	f7fd fc19 	bl	80008d4 <HAL_GetTick>
 80030a2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a4:	e008      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a6:	f7fd fc15 	bl	80008d4 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b64      	cmp	r3, #100	@ 0x64
 80030b2:	d901      	bls.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e0d9      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0f0      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030c4:	4b6b      	ldr	r3, [pc, #428]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d07b      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x194>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030de:	429a      	cmp	r2, r3
 80030e0:	d074      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030e2:	4b64      	ldr	r3, [pc, #400]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030f0:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f4:	fa93 f3a3 	rbit	r3, r3
 80030f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80030fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030fc:	fab3 f383 	clz	r3, r3
 8003100:	b2db      	uxtb	r3, r3
 8003102:	461a      	mov	r2, r3
 8003104:	4b5d      	ldr	r3, [pc, #372]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003106:	4413      	add	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	461a      	mov	r2, r3
 800310c:	2301      	movs	r3, #1
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003114:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003118:	fa93 f3a3 	rbit	r3, r3
 800311c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800311e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003120:	fab3 f383 	clz	r3, r3
 8003124:	b2db      	uxtb	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	4b54      	ldr	r3, [pc, #336]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	461a      	mov	r2, r3
 8003130:	2300      	movs	r3, #0
 8003132:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003134:	4a4f      	ldr	r2, [pc, #316]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003138:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800313a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d043      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7fd fbc6 	bl	80008d4 <HAL_GetTick>
 8003148:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314a:	e00a      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800314c:	f7fd fbc2 	bl	80008d4 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e084      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003162:	2302      	movs	r3, #2
 8003164:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003168:	fa93 f3a3 	rbit	r3, r3
 800316c:	627b      	str	r3, [r7, #36]	@ 0x24
 800316e:	2302      	movs	r3, #2
 8003170:	623b      	str	r3, [r7, #32]
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	fa93 f3a3 	rbit	r3, r3
 8003178:	61fb      	str	r3, [r7, #28]
  return result;
 800317a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317c:	fab3 f383 	clz	r3, r3
 8003180:	b2db      	uxtb	r3, r3
 8003182:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d102      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800318c:	4b39      	ldr	r3, [pc, #228]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	e007      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8003192:	2302      	movs	r3, #2
 8003194:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	fa93 f3a3 	rbit	r3, r3
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	4b35      	ldr	r3, [pc, #212]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80031a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a2:	2202      	movs	r2, #2
 80031a4:	613a      	str	r2, [r7, #16]
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	fa92 f2a2 	rbit	r2, r2
 80031ac:	60fa      	str	r2, [r7, #12]
  return result;
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	fab2 f282 	clz	r2, r2
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	f002 021f 	and.w	r2, r2, #31
 80031c0:	2101      	movs	r1, #1
 80031c2:	fa01 f202 	lsl.w	r2, r1, r2
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0bf      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80031cc:	4b29      	ldr	r3, [pc, #164]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	4926      	ldr	r1, [pc, #152]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031de:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d105      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e6:	4b23      	ldr	r3, [pc, #140]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	4a22      	ldr	r2, [pc, #136]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80031ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031f0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d008      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003202:	f023 0203 	bic.w	r2, r3, #3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	491a      	ldr	r1, [pc, #104]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800320c:	4313      	orrs	r3, r2
 800320e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0320 	and.w	r3, r3, #32
 8003218:	2b00      	cmp	r3, #0
 800321a:	d008      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800321c:	4b15      	ldr	r3, [pc, #84]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800321e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003220:	f023 0210 	bic.w	r2, r3, #16
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4912      	ldr	r1, [pc, #72]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800322a:	4313      	orrs	r3, r2
 800322c:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003236:	2b00      	cmp	r3, #0
 8003238:	d008      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800323a:	4b0e      	ldr	r3, [pc, #56]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800323c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	490b      	ldr	r1, [pc, #44]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003248:	4313      	orrs	r3, r2
 800324a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003258:	4b06      	ldr	r3, [pc, #24]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800325a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	4903      	ldr	r1, [pc, #12]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003266:	4313      	orrs	r3, r2
 8003268:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3748      	adds	r7, #72	@ 0x48
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40021000 	.word	0x40021000
 8003278:	40007000 	.word	0x40007000
 800327c:	10908100 	.word	0x10908100

08003280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e049      	b.n	8003326 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d106      	bne.n	80032ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7fd f9d0 	bl	800064c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3304      	adds	r3, #4
 80032bc:	4619      	mov	r1, r3
 80032be:	4610      	mov	r0, r2
 80032c0:	f000 f8fe 	bl	80034c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b084      	sub	sp, #16
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_TIM_ConfigClockSource+0x1c>
 8003346:	2302      	movs	r3, #2
 8003348:	e0b6      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x18a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2202      	movs	r2, #2
 8003356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003368:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800336c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003374:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003386:	d03e      	beq.n	8003406 <HAL_TIM_ConfigClockSource+0xd8>
 8003388:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800338c:	f200 8087 	bhi.w	800349e <HAL_TIM_ConfigClockSource+0x170>
 8003390:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003394:	f000 8086 	beq.w	80034a4 <HAL_TIM_ConfigClockSource+0x176>
 8003398:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800339c:	d87f      	bhi.n	800349e <HAL_TIM_ConfigClockSource+0x170>
 800339e:	2b70      	cmp	r3, #112	@ 0x70
 80033a0:	d01a      	beq.n	80033d8 <HAL_TIM_ConfigClockSource+0xaa>
 80033a2:	2b70      	cmp	r3, #112	@ 0x70
 80033a4:	d87b      	bhi.n	800349e <HAL_TIM_ConfigClockSource+0x170>
 80033a6:	2b60      	cmp	r3, #96	@ 0x60
 80033a8:	d050      	beq.n	800344c <HAL_TIM_ConfigClockSource+0x11e>
 80033aa:	2b60      	cmp	r3, #96	@ 0x60
 80033ac:	d877      	bhi.n	800349e <HAL_TIM_ConfigClockSource+0x170>
 80033ae:	2b50      	cmp	r3, #80	@ 0x50
 80033b0:	d03c      	beq.n	800342c <HAL_TIM_ConfigClockSource+0xfe>
 80033b2:	2b50      	cmp	r3, #80	@ 0x50
 80033b4:	d873      	bhi.n	800349e <HAL_TIM_ConfigClockSource+0x170>
 80033b6:	2b40      	cmp	r3, #64	@ 0x40
 80033b8:	d058      	beq.n	800346c <HAL_TIM_ConfigClockSource+0x13e>
 80033ba:	2b40      	cmp	r3, #64	@ 0x40
 80033bc:	d86f      	bhi.n	800349e <HAL_TIM_ConfigClockSource+0x170>
 80033be:	2b30      	cmp	r3, #48	@ 0x30
 80033c0:	d064      	beq.n	800348c <HAL_TIM_ConfigClockSource+0x15e>
 80033c2:	2b30      	cmp	r3, #48	@ 0x30
 80033c4:	d86b      	bhi.n	800349e <HAL_TIM_ConfigClockSource+0x170>
 80033c6:	2b20      	cmp	r3, #32
 80033c8:	d060      	beq.n	800348c <HAL_TIM_ConfigClockSource+0x15e>
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	d867      	bhi.n	800349e <HAL_TIM_ConfigClockSource+0x170>
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d05c      	beq.n	800348c <HAL_TIM_ConfigClockSource+0x15e>
 80033d2:	2b10      	cmp	r3, #16
 80033d4:	d05a      	beq.n	800348c <HAL_TIM_ConfigClockSource+0x15e>
 80033d6:	e062      	b.n	800349e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033e8:	f000 f968 	bl	80036bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80033fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	609a      	str	r2, [r3, #8]
      break;
 8003404:	e04f      	b.n	80034a6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003416:	f000 f951 	bl	80036bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003428:	609a      	str	r2, [r3, #8]
      break;
 800342a:	e03c      	b.n	80034a6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003438:	461a      	mov	r2, r3
 800343a:	f000 f8c5 	bl	80035c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2150      	movs	r1, #80	@ 0x50
 8003444:	4618      	mov	r0, r3
 8003446:	f000 f91e 	bl	8003686 <TIM_ITRx_SetConfig>
      break;
 800344a:	e02c      	b.n	80034a6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003458:	461a      	mov	r2, r3
 800345a:	f000 f8e4 	bl	8003626 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2160      	movs	r1, #96	@ 0x60
 8003464:	4618      	mov	r0, r3
 8003466:	f000 f90e 	bl	8003686 <TIM_ITRx_SetConfig>
      break;
 800346a:	e01c      	b.n	80034a6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003478:	461a      	mov	r2, r3
 800347a:	f000 f8a5 	bl	80035c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2140      	movs	r1, #64	@ 0x40
 8003484:	4618      	mov	r0, r3
 8003486:	f000 f8fe 	bl	8003686 <TIM_ITRx_SetConfig>
      break;
 800348a:	e00c      	b.n	80034a6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4619      	mov	r1, r3
 8003496:	4610      	mov	r0, r2
 8003498:	f000 f8f5 	bl	8003686 <TIM_ITRx_SetConfig>
      break;
 800349c:	e003      	b.n	80034a6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
      break;
 80034a2:	e000      	b.n	80034a6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80034a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a38      	ldr	r2, [pc, #224]	@ (80035b4 <TIM_Base_SetConfig+0xf4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d007      	beq.n	80034e8 <TIM_Base_SetConfig+0x28>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034de:	d003      	beq.n	80034e8 <TIM_Base_SetConfig+0x28>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a35      	ldr	r2, [pc, #212]	@ (80035b8 <TIM_Base_SetConfig+0xf8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d108      	bne.n	80034fa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a2d      	ldr	r2, [pc, #180]	@ (80035b4 <TIM_Base_SetConfig+0xf4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d013      	beq.n	800352a <TIM_Base_SetConfig+0x6a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003508:	d00f      	beq.n	800352a <TIM_Base_SetConfig+0x6a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a2a      	ldr	r2, [pc, #168]	@ (80035b8 <TIM_Base_SetConfig+0xf8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00b      	beq.n	800352a <TIM_Base_SetConfig+0x6a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a29      	ldr	r2, [pc, #164]	@ (80035bc <TIM_Base_SetConfig+0xfc>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d007      	beq.n	800352a <TIM_Base_SetConfig+0x6a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a28      	ldr	r2, [pc, #160]	@ (80035c0 <TIM_Base_SetConfig+0x100>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d003      	beq.n	800352a <TIM_Base_SetConfig+0x6a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a27      	ldr	r2, [pc, #156]	@ (80035c4 <TIM_Base_SetConfig+0x104>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d108      	bne.n	800353c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a14      	ldr	r2, [pc, #80]	@ (80035b4 <TIM_Base_SetConfig+0xf4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00b      	beq.n	8003580 <TIM_Base_SetConfig+0xc0>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a14      	ldr	r2, [pc, #80]	@ (80035bc <TIM_Base_SetConfig+0xfc>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d007      	beq.n	8003580 <TIM_Base_SetConfig+0xc0>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a13      	ldr	r2, [pc, #76]	@ (80035c0 <TIM_Base_SetConfig+0x100>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d003      	beq.n	8003580 <TIM_Base_SetConfig+0xc0>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a12      	ldr	r2, [pc, #72]	@ (80035c4 <TIM_Base_SetConfig+0x104>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d103      	bne.n	8003588 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b01      	cmp	r3, #1
 8003598:	d105      	bne.n	80035a6 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f023 0201 	bic.w	r2, r3, #1
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	611a      	str	r2, [r3, #16]
  }
}
 80035a6:	bf00      	nop
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40012c00 	.word	0x40012c00
 80035b8:	40000400 	.word	0x40000400
 80035bc:	40014000 	.word	0x40014000
 80035c0:	40014400 	.word	0x40014400
 80035c4:	40014800 	.word	0x40014800

080035c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	f023 0201 	bic.w	r2, r3, #1
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f023 030a 	bic.w	r3, r3, #10
 8003604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4313      	orrs	r3, r2
 800360c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	621a      	str	r2, [r3, #32]
}
 800361a:	bf00      	nop
 800361c:	371c      	adds	r7, #28
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003626:	b480      	push	{r7}
 8003628:	b087      	sub	sp, #28
 800362a:	af00      	add	r7, sp, #0
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f023 0210 	bic.w	r2, r3, #16
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003650:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	031b      	lsls	r3, r3, #12
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003662:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	4313      	orrs	r3, r2
 800366c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	621a      	str	r2, [r3, #32]
}
 800367a:	bf00      	nop
 800367c:	371c      	adds	r7, #28
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003686:	b480      	push	{r7}
 8003688:	b085      	sub	sp, #20
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800369c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f043 0307 	orr.w	r3, r3, #7
 80036a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	609a      	str	r2, [r3, #8]
}
 80036b0:	bf00      	nop
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036bc:	b480      	push	{r7}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	021a      	lsls	r2, r3, #8
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	431a      	orrs	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	609a      	str	r2, [r3, #8]
}
 80036f0:	bf00      	nop
 80036f2:	371c      	adds	r7, #28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003710:	2302      	movs	r3, #2
 8003712:	e054      	b.n	80037be <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a24      	ldr	r2, [pc, #144]	@ (80037cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d108      	bne.n	8003750 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003744:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4313      	orrs	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003756:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a17      	ldr	r2, [pc, #92]	@ (80037cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d00e      	beq.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800377c:	d009      	beq.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a13      	ldr	r2, [pc, #76]	@ (80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d004      	beq.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a11      	ldr	r2, [pc, #68]	@ (80037d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d10c      	bne.n	80037ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003798:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40012c00 	.word	0x40012c00
 80037d0:	40000400 	.word	0x40000400
 80037d4:	40014000 	.word	0x40014000

080037d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e040      	b.n	800386c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7fc ff44 	bl	8000688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2224      	movs	r2, #36	@ 0x24
 8003804:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0201 	bic.w	r2, r2, #1
 8003814:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fc64 	bl	80040ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fb2b 	bl	8003e80 <UART_SetConfig>
 800382a:	4603      	mov	r3, r0
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e01b      	b.n	800386c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003842:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003852:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0201 	orr.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fce3 	bl	8004230 <UART_CheckIdleState>
 800386a:	4603      	mov	r3, r0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b0ba      	sub	sp, #232	@ 0xe8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800389a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800389e:	f640 030f 	movw	r3, #2063	@ 0x80f
 80038a2:	4013      	ands	r3, r2
 80038a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80038a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d115      	bne.n	80038dc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80038b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038b4:	f003 0320 	and.w	r3, r3, #32
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00f      	beq.n	80038dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d009      	beq.n	80038dc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 82ab 	beq.w	8003e28 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	4798      	blx	r3
      }
      return;
 80038da:	e2a5      	b.n	8003e28 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80038dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 8117 	beq.w	8003b14 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80038e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d106      	bne.n	8003900 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80038f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80038f6:	4b85      	ldr	r3, [pc, #532]	@ (8003b0c <HAL_UART_IRQHandler+0x298>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 810a 	beq.w	8003b14 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d011      	beq.n	8003930 <HAL_UART_IRQHandler+0xbc>
 800390c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00b      	beq.n	8003930 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2201      	movs	r2, #1
 800391e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003926:	f043 0201 	orr.w	r2, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d011      	beq.n	8003960 <HAL_UART_IRQHandler+0xec>
 800393c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00b      	beq.n	8003960 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2202      	movs	r2, #2
 800394e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003956:	f043 0204 	orr.w	r2, r3, #4
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d011      	beq.n	8003990 <HAL_UART_IRQHandler+0x11c>
 800396c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00b      	beq.n	8003990 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2204      	movs	r2, #4
 800397e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003986:	f043 0202 	orr.w	r2, r3, #2
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b00      	cmp	r3, #0
 800399a:	d017      	beq.n	80039cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800399c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d105      	bne.n	80039b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80039a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00b      	beq.n	80039cc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2208      	movs	r2, #8
 80039ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039c2:	f043 0208 	orr.w	r2, r3, #8
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80039cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d012      	beq.n	80039fe <HAL_UART_IRQHandler+0x18a>
 80039d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00c      	beq.n	80039fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039f4:	f043 0220 	orr.w	r2, r3, #32
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 8211 	beq.w	8003e2c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00d      	beq.n	8003a32 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d007      	beq.n	8003a32 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a46:	2b40      	cmp	r3, #64	@ 0x40
 8003a48:	d005      	beq.n	8003a56 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a4e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d04f      	beq.n	8003af6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 fcff 	bl	800445a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a66:	2b40      	cmp	r3, #64	@ 0x40
 8003a68:	d141      	bne.n	8003aee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3308      	adds	r3, #8
 8003a70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a78:	e853 3f00 	ldrex	r3, [r3]
 8003a7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003a80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3308      	adds	r3, #8
 8003a92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003a96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003aa2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003aa6:	e841 2300 	strex	r3, r2, [r1]
 8003aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003aae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1d9      	bne.n	8003a6a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d013      	beq.n	8003ae6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac2:	4a13      	ldr	r2, [pc, #76]	@ (8003b10 <HAL_UART_IRQHandler+0x29c>)
 8003ac4:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fd fe20 	bl	8001710 <HAL_DMA_Abort_IT>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d017      	beq.n	8003b06 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae4:	e00f      	b.n	8003b06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f9b4 	bl	8003e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aec:	e00b      	b.n	8003b06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f9b0 	bl	8003e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af4:	e007      	b.n	8003b06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f9ac 	bl	8003e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003b04:	e192      	b.n	8003e2c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b06:	bf00      	nop
    return;
 8003b08:	e190      	b.n	8003e2c <HAL_UART_IRQHandler+0x5b8>
 8003b0a:	bf00      	nop
 8003b0c:	04000120 	.word	0x04000120
 8003b10:	08004523 	.word	0x08004523

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	f040 814b 	bne.w	8003db4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b22:	f003 0310 	and.w	r3, r3, #16
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 8144 	beq.w	8003db4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b30:	f003 0310 	and.w	r3, r3, #16
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 813d 	beq.w	8003db4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2210      	movs	r2, #16
 8003b40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b4c:	2b40      	cmp	r3, #64	@ 0x40
 8003b4e:	f040 80b5 	bne.w	8003cbc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b5e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 8164 	beq.w	8003e30 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b72:	429a      	cmp	r2, r3
 8003b74:	f080 815c 	bcs.w	8003e30 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b7e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	2b20      	cmp	r3, #32
 8003b8a:	f000 8086 	beq.w	8003c9a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b9a:	e853 3f00 	ldrex	r3, [r3]
 8003b9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ba2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ba6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003baa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003bb8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003bbc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003bc4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003bc8:	e841 2300 	strex	r3, r2, [r1]
 8003bcc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003bd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1da      	bne.n	8003b8e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3308      	adds	r3, #8
 8003bde:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003be2:	e853 3f00 	ldrex	r3, [r3]
 8003be6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003be8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bea:	f023 0301 	bic.w	r3, r3, #1
 8003bee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3308      	adds	r3, #8
 8003bf8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003bfc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c00:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c02:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c04:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c08:	e841 2300 	strex	r3, r2, [r1]
 8003c0c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1e1      	bne.n	8003bd8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3308      	adds	r3, #8
 8003c1a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c1e:	e853 3f00 	ldrex	r3, [r3]
 8003c22:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3308      	adds	r3, #8
 8003c34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c38:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c3a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c3e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c40:	e841 2300 	strex	r3, r2, [r1]
 8003c44:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e3      	bne.n	8003c14 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c62:	e853 3f00 	ldrex	r3, [r3]
 8003c66:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c6a:	f023 0310 	bic.w	r3, r3, #16
 8003c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c7e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c84:	e841 2300 	strex	r3, r2, [r1]
 8003c88:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1e4      	bne.n	8003c5a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fd fcfd 	bl	8001694 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f8d7 	bl	8003e68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003cba:	e0b9      	b.n	8003e30 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 80ab 	beq.w	8003e34 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003cde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 80a6 	beq.w	8003e34 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf0:	e853 3f00 	ldrex	r3, [r3]
 8003cf4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cfc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	461a      	mov	r2, r3
 8003d06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003d0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d0c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d12:	e841 2300 	strex	r3, r2, [r1]
 8003d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1e4      	bne.n	8003ce8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	3308      	adds	r3, #8
 8003d24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d28:	e853 3f00 	ldrex	r3, [r3]
 8003d2c:	623b      	str	r3, [r7, #32]
   return(result);
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	f023 0301 	bic.w	r3, r3, #1
 8003d34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3308      	adds	r3, #8
 8003d3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d42:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d4a:	e841 2300 	strex	r3, r2, [r1]
 8003d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1e3      	bne.n	8003d1e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 0310 	bic.w	r3, r3, #16
 8003d7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	461a      	mov	r2, r3
 8003d88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d8c:	61fb      	str	r3, [r7, #28]
 8003d8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d90:	69b9      	ldr	r1, [r7, #24]
 8003d92:	69fa      	ldr	r2, [r7, #28]
 8003d94:	e841 2300 	strex	r3, r2, [r1]
 8003d98:	617b      	str	r3, [r7, #20]
   return(result);
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e4      	bne.n	8003d6a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003da6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003daa:	4619      	mov	r1, r3
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f85b 	bl	8003e68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003db2:	e03f      	b.n	8003e34 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003db8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00e      	beq.n	8003dde <HAL_UART_IRQHandler+0x56a>
 8003dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003dd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fbe3 	bl	80045a2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ddc:	e02d      	b.n	8003e3a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00e      	beq.n	8003e08 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d008      	beq.n	8003e08 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d01c      	beq.n	8003e38 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	4798      	blx	r3
    }
    return;
 8003e06:	e017      	b.n	8003e38 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d012      	beq.n	8003e3a <HAL_UART_IRQHandler+0x5c6>
 8003e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00c      	beq.n	8003e3a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 fb94 	bl	800454e <UART_EndTransmit_IT>
    return;
 8003e26:	e008      	b.n	8003e3a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003e28:	bf00      	nop
 8003e2a:	e006      	b.n	8003e3a <HAL_UART_IRQHandler+0x5c6>
    return;
 8003e2c:	bf00      	nop
 8003e2e:	e004      	b.n	8003e3a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003e30:	bf00      	nop
 8003e32:	e002      	b.n	8003e3a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003e34:	bf00      	nop
 8003e36:	e000      	b.n	8003e3a <HAL_UART_IRQHandler+0x5c6>
    return;
 8003e38:	bf00      	nop
  }

}
 8003e3a:	37e8      	adds	r7, #232	@ 0xe8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	4b8a      	ldr	r3, [pc, #552]	@ (80040d4 <UART_SetConfig+0x254>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6812      	ldr	r2, [r2, #0]
 8003eb2:	6979      	ldr	r1, [r7, #20]
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a78      	ldr	r2, [pc, #480]	@ (80040d8 <UART_SetConfig+0x258>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d120      	bne.n	8003f3e <UART_SetConfig+0xbe>
 8003efc:	4b77      	ldr	r3, [pc, #476]	@ (80040dc <UART_SetConfig+0x25c>)
 8003efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f00:	f003 0303 	and.w	r3, r3, #3
 8003f04:	2b03      	cmp	r3, #3
 8003f06:	d817      	bhi.n	8003f38 <UART_SetConfig+0xb8>
 8003f08:	a201      	add	r2, pc, #4	@ (adr r2, 8003f10 <UART_SetConfig+0x90>)
 8003f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0e:	bf00      	nop
 8003f10:	08003f21 	.word	0x08003f21
 8003f14:	08003f2d 	.word	0x08003f2d
 8003f18:	08003f33 	.word	0x08003f33
 8003f1c:	08003f27 	.word	0x08003f27
 8003f20:	2300      	movs	r3, #0
 8003f22:	77fb      	strb	r3, [r7, #31]
 8003f24:	e01d      	b.n	8003f62 <UART_SetConfig+0xe2>
 8003f26:	2302      	movs	r3, #2
 8003f28:	77fb      	strb	r3, [r7, #31]
 8003f2a:	e01a      	b.n	8003f62 <UART_SetConfig+0xe2>
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	77fb      	strb	r3, [r7, #31]
 8003f30:	e017      	b.n	8003f62 <UART_SetConfig+0xe2>
 8003f32:	2308      	movs	r3, #8
 8003f34:	77fb      	strb	r3, [r7, #31]
 8003f36:	e014      	b.n	8003f62 <UART_SetConfig+0xe2>
 8003f38:	2310      	movs	r3, #16
 8003f3a:	77fb      	strb	r3, [r7, #31]
 8003f3c:	e011      	b.n	8003f62 <UART_SetConfig+0xe2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a67      	ldr	r2, [pc, #412]	@ (80040e0 <UART_SetConfig+0x260>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d102      	bne.n	8003f4e <UART_SetConfig+0xce>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	77fb      	strb	r3, [r7, #31]
 8003f4c:	e009      	b.n	8003f62 <UART_SetConfig+0xe2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a64      	ldr	r2, [pc, #400]	@ (80040e4 <UART_SetConfig+0x264>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d102      	bne.n	8003f5e <UART_SetConfig+0xde>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	77fb      	strb	r3, [r7, #31]
 8003f5c:	e001      	b.n	8003f62 <UART_SetConfig+0xe2>
 8003f5e:	2310      	movs	r3, #16
 8003f60:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f6a:	d15a      	bne.n	8004022 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003f6c:	7ffb      	ldrb	r3, [r7, #31]
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d827      	bhi.n	8003fc2 <UART_SetConfig+0x142>
 8003f72:	a201      	add	r2, pc, #4	@ (adr r2, 8003f78 <UART_SetConfig+0xf8>)
 8003f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f78:	08003f9d 	.word	0x08003f9d
 8003f7c:	08003fa5 	.word	0x08003fa5
 8003f80:	08003fad 	.word	0x08003fad
 8003f84:	08003fc3 	.word	0x08003fc3
 8003f88:	08003fb3 	.word	0x08003fb3
 8003f8c:	08003fc3 	.word	0x08003fc3
 8003f90:	08003fc3 	.word	0x08003fc3
 8003f94:	08003fc3 	.word	0x08003fc3
 8003f98:	08003fbb 	.word	0x08003fbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f9c:	f7ff f808 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8003fa0:	61b8      	str	r0, [r7, #24]
        break;
 8003fa2:	e013      	b.n	8003fcc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fa4:	f7ff f826 	bl	8002ff4 <HAL_RCC_GetPCLK2Freq>
 8003fa8:	61b8      	str	r0, [r7, #24]
        break;
 8003faa:	e00f      	b.n	8003fcc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fac:	4b4e      	ldr	r3, [pc, #312]	@ (80040e8 <UART_SetConfig+0x268>)
 8003fae:	61bb      	str	r3, [r7, #24]
        break;
 8003fb0:	e00c      	b.n	8003fcc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fb2:	f7fe ff9d 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 8003fb6:	61b8      	str	r0, [r7, #24]
        break;
 8003fb8:	e008      	b.n	8003fcc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fbe:	61bb      	str	r3, [r7, #24]
        break;
 8003fc0:	e004      	b.n	8003fcc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	77bb      	strb	r3, [r7, #30]
        break;
 8003fca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d074      	beq.n	80040bc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	005a      	lsls	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	085b      	lsrs	r3, r3, #1
 8003fdc:	441a      	add	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	2b0f      	cmp	r3, #15
 8003fec:	d916      	bls.n	800401c <UART_SetConfig+0x19c>
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ff4:	d212      	bcs.n	800401c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	f023 030f 	bic.w	r3, r3, #15
 8003ffe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	085b      	lsrs	r3, r3, #1
 8004004:	b29b      	uxth	r3, r3
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	b29a      	uxth	r2, r3
 800400c:	89fb      	ldrh	r3, [r7, #14]
 800400e:	4313      	orrs	r3, r2
 8004010:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	89fa      	ldrh	r2, [r7, #14]
 8004018:	60da      	str	r2, [r3, #12]
 800401a:	e04f      	b.n	80040bc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	77bb      	strb	r3, [r7, #30]
 8004020:	e04c      	b.n	80040bc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004022:	7ffb      	ldrb	r3, [r7, #31]
 8004024:	2b08      	cmp	r3, #8
 8004026:	d828      	bhi.n	800407a <UART_SetConfig+0x1fa>
 8004028:	a201      	add	r2, pc, #4	@ (adr r2, 8004030 <UART_SetConfig+0x1b0>)
 800402a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402e:	bf00      	nop
 8004030:	08004055 	.word	0x08004055
 8004034:	0800405d 	.word	0x0800405d
 8004038:	08004065 	.word	0x08004065
 800403c:	0800407b 	.word	0x0800407b
 8004040:	0800406b 	.word	0x0800406b
 8004044:	0800407b 	.word	0x0800407b
 8004048:	0800407b 	.word	0x0800407b
 800404c:	0800407b 	.word	0x0800407b
 8004050:	08004073 	.word	0x08004073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004054:	f7fe ffac 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8004058:	61b8      	str	r0, [r7, #24]
        break;
 800405a:	e013      	b.n	8004084 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800405c:	f7fe ffca 	bl	8002ff4 <HAL_RCC_GetPCLK2Freq>
 8004060:	61b8      	str	r0, [r7, #24]
        break;
 8004062:	e00f      	b.n	8004084 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004064:	4b20      	ldr	r3, [pc, #128]	@ (80040e8 <UART_SetConfig+0x268>)
 8004066:	61bb      	str	r3, [r7, #24]
        break;
 8004068:	e00c      	b.n	8004084 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800406a:	f7fe ff41 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 800406e:	61b8      	str	r0, [r7, #24]
        break;
 8004070:	e008      	b.n	8004084 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004072:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004076:	61bb      	str	r3, [r7, #24]
        break;
 8004078:	e004      	b.n	8004084 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	77bb      	strb	r3, [r7, #30]
        break;
 8004082:	bf00      	nop
    }

    if (pclk != 0U)
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d018      	beq.n	80040bc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	085a      	lsrs	r2, r3, #1
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	441a      	add	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	fbb2 f3f3 	udiv	r3, r2, r3
 800409c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	2b0f      	cmp	r3, #15
 80040a2:	d909      	bls.n	80040b8 <UART_SetConfig+0x238>
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040aa:	d205      	bcs.n	80040b8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	60da      	str	r2, [r3, #12]
 80040b6:	e001      	b.n	80040bc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80040c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3720      	adds	r7, #32
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	efff69f3 	.word	0xefff69f3
 80040d8:	40013800 	.word	0x40013800
 80040dc:	40021000 	.word	0x40021000
 80040e0:	40004400 	.word	0x40004400
 80040e4:	40004800 	.word	0x40004800
 80040e8:	007a1200 	.word	0x007a1200

080040ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f8:	f003 0308 	and.w	r3, r3, #8
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00a      	beq.n	8004116 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00a      	beq.n	800415a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00a      	beq.n	800417c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004180:	f003 0310 	and.w	r3, r3, #16
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00a      	beq.n	800419e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d01a      	beq.n	8004202 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041ea:	d10a      	bne.n	8004202 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	605a      	str	r2, [r3, #4]
  }
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b098      	sub	sp, #96	@ 0x60
 8004234:	af02      	add	r7, sp, #8
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004240:	f7fc fb48 	bl	80008d4 <HAL_GetTick>
 8004244:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0308 	and.w	r3, r3, #8
 8004250:	2b08      	cmp	r3, #8
 8004252:	d12e      	bne.n	80042b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004254:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800425c:	2200      	movs	r2, #0
 800425e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f88c 	bl	8004380 <UART_WaitOnFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d021      	beq.n	80042b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004276:	e853 3f00 	ldrex	r3, [r3]
 800427a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800427c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800427e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004282:	653b      	str	r3, [r7, #80]	@ 0x50
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	461a      	mov	r2, r3
 800428a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800428c:	647b      	str	r3, [r7, #68]	@ 0x44
 800428e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004290:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004292:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004294:	e841 2300 	strex	r3, r2, [r1]
 8004298:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800429a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1e6      	bne.n	800426e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2220      	movs	r2, #32
 80042a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e062      	b.n	8004378 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d149      	bne.n	8004354 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c8:	2200      	movs	r2, #0
 80042ca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f856 	bl	8004380 <UART_WaitOnFlagUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d03c      	beq.n	8004354 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e2:	e853 3f00 	ldrex	r3, [r3]
 80042e6:	623b      	str	r3, [r7, #32]
   return(result);
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	461a      	mov	r2, r3
 80042f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80042fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004300:	e841 2300 	strex	r3, r2, [r1]
 8004304:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1e6      	bne.n	80042da <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3308      	adds	r3, #8
 8004312:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	e853 3f00 	ldrex	r3, [r3]
 800431a:	60fb      	str	r3, [r7, #12]
   return(result);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0301 	bic.w	r3, r3, #1
 8004322:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3308      	adds	r3, #8
 800432a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800432c:	61fa      	str	r2, [r7, #28]
 800432e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004330:	69b9      	ldr	r1, [r7, #24]
 8004332:	69fa      	ldr	r2, [r7, #28]
 8004334:	e841 2300 	strex	r3, r2, [r1]
 8004338:	617b      	str	r3, [r7, #20]
   return(result);
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e5      	bne.n	800430c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2220      	movs	r2, #32
 8004344:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e011      	b.n	8004378 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2220      	movs	r2, #32
 8004358:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2220      	movs	r2, #32
 800435e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3758      	adds	r7, #88	@ 0x58
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	4613      	mov	r3, r2
 800438e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004390:	e04f      	b.n	8004432 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004398:	d04b      	beq.n	8004432 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800439a:	f7fc fa9b 	bl	80008d4 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d302      	bcc.n	80043b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e04e      	b.n	8004452 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d037      	beq.n	8004432 <UART_WaitOnFlagUntilTimeout+0xb2>
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2b80      	cmp	r3, #128	@ 0x80
 80043c6:	d034      	beq.n	8004432 <UART_WaitOnFlagUntilTimeout+0xb2>
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2b40      	cmp	r3, #64	@ 0x40
 80043cc:	d031      	beq.n	8004432 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d110      	bne.n	80043fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2208      	movs	r2, #8
 80043e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 f838 	bl	800445a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2208      	movs	r2, #8
 80043ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e029      	b.n	8004452 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004408:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800440c:	d111      	bne.n	8004432 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004416:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 f81e 	bl	800445a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2220      	movs	r2, #32
 8004422:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e00f      	b.n	8004452 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69da      	ldr	r2, [r3, #28]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	4013      	ands	r3, r2
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	429a      	cmp	r2, r3
 8004440:	bf0c      	ite	eq
 8004442:	2301      	moveq	r3, #1
 8004444:	2300      	movne	r3, #0
 8004446:	b2db      	uxtb	r3, r3
 8004448:	461a      	mov	r2, r3
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	429a      	cmp	r2, r3
 800444e:	d0a0      	beq.n	8004392 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800445a:	b480      	push	{r7}
 800445c:	b095      	sub	sp, #84	@ 0x54
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800446a:	e853 3f00 	ldrex	r3, [r3]
 800446e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004472:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004480:	643b      	str	r3, [r7, #64]	@ 0x40
 8004482:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004484:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004486:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004488:	e841 2300 	strex	r3, r2, [r1]
 800448c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800448e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1e6      	bne.n	8004462 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3308      	adds	r3, #8
 800449a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	e853 3f00 	ldrex	r3, [r3]
 80044a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	f023 0301 	bic.w	r3, r3, #1
 80044aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3308      	adds	r3, #8
 80044b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044bc:	e841 2300 	strex	r3, r2, [r1]
 80044c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e5      	bne.n	8004494 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d118      	bne.n	8004502 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	e853 3f00 	ldrex	r3, [r3]
 80044dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f023 0310 	bic.w	r3, r3, #16
 80044e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044ee:	61bb      	str	r3, [r7, #24]
 80044f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f2:	6979      	ldr	r1, [r7, #20]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	e841 2300 	strex	r3, r2, [r1]
 80044fa:	613b      	str	r3, [r7, #16]
   return(result);
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1e6      	bne.n	80044d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2220      	movs	r2, #32
 8004506:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004516:	bf00      	nop
 8004518:	3754      	adds	r7, #84	@ 0x54
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f7ff fc87 	bl	8003e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004546:	bf00      	nop
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b088      	sub	sp, #32
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	e853 3f00 	ldrex	r3, [r3]
 8004562:	60bb      	str	r3, [r7, #8]
   return(result);
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800456a:	61fb      	str	r3, [r7, #28]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	461a      	mov	r2, r3
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	61bb      	str	r3, [r7, #24]
 8004576:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004578:	6979      	ldr	r1, [r7, #20]
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	e841 2300 	strex	r3, r2, [r1]
 8004580:	613b      	str	r3, [r7, #16]
   return(result);
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1e6      	bne.n	8004556 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2220      	movs	r2, #32
 800458c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff fc53 	bl	8003e40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800459a:	bf00      	nop
 800459c:	3720      	adds	r7, #32
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <memset>:
 80045b6:	4402      	add	r2, r0
 80045b8:	4603      	mov	r3, r0
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d100      	bne.n	80045c0 <memset+0xa>
 80045be:	4770      	bx	lr
 80045c0:	f803 1b01 	strb.w	r1, [r3], #1
 80045c4:	e7f9      	b.n	80045ba <memset+0x4>
	...

080045c8 <__libc_init_array>:
 80045c8:	b570      	push	{r4, r5, r6, lr}
 80045ca:	4d0d      	ldr	r5, [pc, #52]	@ (8004600 <__libc_init_array+0x38>)
 80045cc:	4c0d      	ldr	r4, [pc, #52]	@ (8004604 <__libc_init_array+0x3c>)
 80045ce:	1b64      	subs	r4, r4, r5
 80045d0:	10a4      	asrs	r4, r4, #2
 80045d2:	2600      	movs	r6, #0
 80045d4:	42a6      	cmp	r6, r4
 80045d6:	d109      	bne.n	80045ec <__libc_init_array+0x24>
 80045d8:	4d0b      	ldr	r5, [pc, #44]	@ (8004608 <__libc_init_array+0x40>)
 80045da:	4c0c      	ldr	r4, [pc, #48]	@ (800460c <__libc_init_array+0x44>)
 80045dc:	f000 f818 	bl	8004610 <_init>
 80045e0:	1b64      	subs	r4, r4, r5
 80045e2:	10a4      	asrs	r4, r4, #2
 80045e4:	2600      	movs	r6, #0
 80045e6:	42a6      	cmp	r6, r4
 80045e8:	d105      	bne.n	80045f6 <__libc_init_array+0x2e>
 80045ea:	bd70      	pop	{r4, r5, r6, pc}
 80045ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f0:	4798      	blx	r3
 80045f2:	3601      	adds	r6, #1
 80045f4:	e7ee      	b.n	80045d4 <__libc_init_array+0xc>
 80045f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045fa:	4798      	blx	r3
 80045fc:	3601      	adds	r6, #1
 80045fe:	e7f2      	b.n	80045e6 <__libc_init_array+0x1e>
 8004600:	08004660 	.word	0x08004660
 8004604:	08004660 	.word	0x08004660
 8004608:	08004660 	.word	0x08004660
 800460c:	08004664 	.word	0x08004664

08004610 <_init>:
 8004610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004612:	bf00      	nop
 8004614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004616:	bc08      	pop	{r3}
 8004618:	469e      	mov	lr, r3
 800461a:	4770      	bx	lr

0800461c <_fini>:
 800461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461e:	bf00      	nop
 8004620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004622:	bc08      	pop	{r3}
 8004624:	469e      	mov	lr, r3
 8004626:	4770      	bx	lr
